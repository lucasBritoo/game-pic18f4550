

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Mar 28 20:52:15 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  000E4E                     __pidataCOMRAM:
    71                           	callstack 0
    72                           
    73                           ;initializer for _envia
    74  000E4E  48                 	db	72
    75  0000                     _PORTBbits	set	3969
    76  0000                     _PORTE	set	3972
    77  0000                     _PORTD	set	3971
    78  0000                     _TXREG	set	4013
    79  0000                     _RCREG	set	4014
    80  0000                     _SPBRG	set	4015
    81  0000                     _BAUDCON	set	4024
    82  0000                     _RCSTA	set	4011
    83  0000                     _TXSTA	set	4012
    84  0000                     _INTCON	set	4082
    85  0000                     _TRISE	set	3990
    86  0000                     _TRISD	set	3989
    87  0000                     _TRISC	set	3988
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISA	set	3986
    90  0000                     _LE0	set	31848
    91  0000                     _LE1	set	31849
    92  0000                     _RCIF	set	31989
    93  0000                     _RCIP	set	31997
    94  0000                     _RCIE	set	31981
    95  0000                     _IPEN	set	32391
    96                           
    97                           	psect	smallconst
    98  000800                     __psmallconst:
    99                           	callstack 0
   100  000800  00                 	db	0
   101  000801                     STR_1:
   102  000801  20                 	db	32
   103  000802  00                 	db	0
   104  000803  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109  000D70                     __pcinit:
   110                           	callstack 0
   111  000D70                     start_initialization:
   112                           	callstack 0
   113  000D70                     __initialization:
   114                           	callstack 0
   115                           
   116                           ; Initialize objects allocated to COMRAM (1 bytes)
   117                           ; load TBLPTR registers with __pidataCOMRAM
   118  000D70  0E4E               	movlw	low __pidataCOMRAM
   119  000D72  6EF6               	movwf	tblptrl,c
   120  000D74  0E0E               	movlw	high __pidataCOMRAM
   121  000D76  6EF7               	movwf	tblptrh,c
   122  000D78  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   123  000D7A  6EF8               	movwf	tblptru,c
   124  000D7C  0009               	tblrd		*+	;fetch initializer
   125  000D7E  CFF5 F030          	movff	tablat,__pdataCOMRAM
   126                           
   127                           ; Clear objects allocated to COMRAM (2 bytes)
   128  000D82  6A2F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   129  000D84  6A2E               	clrf	__pbssCOMRAM& (0+255),c
   130  000D86                     end_of_initialization:
   131                           	callstack 0
   132  000D86                     __end_of__initialization:
   133                           	callstack 0
   134  000D86  9031               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   135  000D88  9231               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   136  000D8A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   137  000D8C  6EF8               	movwf	tblptru,c
   138  000D8E  0100               	movlb	0
   139  000D90  EF02  F004         	goto	_main	;jump to C main() function
   140                           
   141                           	psect	bssCOMRAM
   142  00002E                     __pbssCOMRAM:
   143                           	callstack 0
   144  00002E                     _x:
   145                           	callstack 0
   146  00002E                     	ds	2
   147                           
   148                           	psect	dataCOMRAM
   149  000030                     __pdataCOMRAM:
   150                           	callstack 0
   151  000030                     _envia:
   152                           	callstack 0
   153  000030                     	ds	1
   154                           
   155                           	psect	cstackCOMRAM
   156  000001                     __pcstackCOMRAM:
   157                           	callstack 0
   158  000001                     ??i2_lcd_write:
   159                           
   160                           ; 1 bytes @ 0x0
   161  000001                     	ds	1
   162  000002                     i2lcd_write@c:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x1
   166  000002                     	ds	1
   167  000003                     lcd_putch@c:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0x2
   171  000003                     	ds	1
   172  000004                     tmr@serial:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x3
   176  000004                     	ds	1
   177  000005                     ??_lcd_write:
   178                           
   179                           ; 1 bytes @ 0x4
   180  000005                     	ds	1
   181  000006                     lcd_write@c:
   182                           	callstack 0
   183                           
   184                           ; 1 bytes @ 0x5
   185  000006                     	ds	1
   186  000007                     ??_lcd_clear:
   187  000007                     ??_lcd_player:
   188  000007                     lcd_puts@s:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x6
   192  000007                     	ds	1
   193  000008                     ??_lcd_init:
   194                           
   195                           ; 1 bytes @ 0x7
   196  000008                     	ds	1
   197  000009                     lcd_movimentoObstaculo@pos:
   198                           	callstack 0
   199                           
   200                           ; 1 bytes @ 0x8
   201  000009                     	ds	1
   202  00000A                     movA@p:
   203                           	callstack 0
   204  00000A                     movB@q:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x9
   208  00000A                     	ds	2
   209  00000C                     movA@a:
   210                           	callstack 0
   211  00000C                     movB@b:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0xB
   215  00000C                     	ds	2
   216  00000E                     movA@flag:
   217                           	callstack 0
   218  00000E                     movB@flag:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0xD
   222  00000E                     	ds	2
   223  000010                     ??_movA:
   224  000010                     ??_movB:
   225                           
   226                           ; 1 bytes @ 0xF
   227  000010                     	ds	1
   228  000011                     ??_main:
   229                           
   230                           ; 1 bytes @ 0x10
   231  000011                     	ds	2
   232  000013                     main@flagA1:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0x12
   236  000013                     	ds	1
   237  000014                     main@p1:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x13
   241  000014                     	ds	1
   242  000015                     main@p2:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x14
   246  000015                     	ds	1
   247  000016                     main@p3:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0x15
   251  000016                     	ds	1
   252  000017                     main@p4:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0x16
   256  000017                     	ds	1
   257  000018                     main@q1:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x17
   261  000018                     	ds	1
   262  000019                     main@q2:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0x18
   266  000019                     	ds	1
   267  00001A                     main@q3:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0x19
   271  00001A                     	ds	1
   272  00001B                     main@q4:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x1A
   276  00001B                     	ds	1
   277  00001C                     main@q5:
   278                           	callstack 0
   279                           
   280                           ; 1 bytes @ 0x1B
   281  00001C                     	ds	1
   282  00001D                     main@a2:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x1C
   286  00001D                     	ds	1
   287  00001E                     main@a3:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x1D
   291  00001E                     	ds	1
   292  00001F                     main@a4:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0x1E
   296  00001F                     	ds	1
   297  000020                     main@b1:
   298                           	callstack 0
   299                           
   300                           ; 1 bytes @ 0x1F
   301  000020                     	ds	1
   302  000021                     main@b2:
   303                           	callstack 0
   304                           
   305                           ; 1 bytes @ 0x20
   306  000021                     	ds	1
   307  000022                     main@b3:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0x21
   311  000022                     	ds	1
   312  000023                     main@b4:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x22
   316  000023                     	ds	1
   317  000024                     main@b5:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x23
   321  000024                     	ds	1
   322  000025                     main@flagA2:
   323                           	callstack 0
   324                           
   325                           ; 1 bytes @ 0x24
   326  000025                     	ds	1
   327  000026                     main@flagA3:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0x25
   331  000026                     	ds	1
   332  000027                     main@flagA4:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0x26
   336  000027                     	ds	1
   337  000028                     main@flagB1:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x27
   341  000028                     	ds	1
   342  000029                     main@flagB2:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0x28
   346  000029                     	ds	1
   347  00002A                     main@flagB3:
   348                           	callstack 0
   349                           
   350                           ; 1 bytes @ 0x29
   351  00002A                     	ds	1
   352  00002B                     main@flagB4:
   353                           	callstack 0
   354                           
   355                           ; 1 bytes @ 0x2A
   356  00002B                     	ds	1
   357  00002C                     main@flagB5:
   358                           	callstack 0
   359                           
   360                           ; 1 bytes @ 0x2B
   361  00002C                     	ds	1
   362  00002D                     main@a1:
   363                           	callstack 0
   364                           
   365                           ; 1 bytes @ 0x2C
   366  00002D                     	ds	1
   367                           
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 58 in file "main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;  a1              1   44[COMRAM] unsigned char 
   378 ;;  flagB5          1   43[COMRAM] unsigned char 
   379 ;;  flagB4          1   42[COMRAM] unsigned char 
   380 ;;  flagB3          1   41[COMRAM] unsigned char 
   381 ;;  flagB2          1   40[COMRAM] unsigned char 
   382 ;;  flagB1          1   39[COMRAM] unsigned char 
   383 ;;  flagA4          1   38[COMRAM] unsigned char 
   384 ;;  flagA3          1   37[COMRAM] unsigned char 
   385 ;;  flagA2          1   36[COMRAM] unsigned char 
   386 ;;  b5              1   35[COMRAM] unsigned char 
   387 ;;  b4              1   34[COMRAM] unsigned char 
   388 ;;  b3              1   33[COMRAM] unsigned char 
   389 ;;  b2              1   32[COMRAM] unsigned char 
   390 ;;  b1              1   31[COMRAM] unsigned char 
   391 ;;  a4              1   30[COMRAM] unsigned char 
   392 ;;  a3              1   29[COMRAM] unsigned char 
   393 ;;  a2              1   28[COMRAM] unsigned char 
   394 ;;  q5              1   27[COMRAM] unsigned char 
   395 ;;  q4              1   26[COMRAM] unsigned char 
   396 ;;  q3              1   25[COMRAM] unsigned char 
   397 ;;  q2              1   24[COMRAM] unsigned char 
   398 ;;  q1              1   23[COMRAM] unsigned char 
   399 ;;  p4              1   22[COMRAM] unsigned char 
   400 ;;  p3              1   21[COMRAM] unsigned char 
   401 ;;  p2              1   20[COMRAM] unsigned char 
   402 ;;  p1              1   19[COMRAM] unsigned char 
   403 ;;  flagA1          1   18[COMRAM] unsigned char 
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   413 ;;      Params:         0       0       0       0       0       0       0       0       0
   414 ;;      Locals:        27       0       0       0       0       0       0       0       0
   415 ;;      Temps:          2       0       0       0       0       0       0       0       0
   416 ;;      Totals:        29       0       0       0       0       0       0       0       0
   417 ;;Total ram usage:       29 bytes
   418 ;; Hardware stack levels required when called: 7
   419 ;; This function calls:
   420 ;;		_configura
   421 ;;		_lcd_clear
   422 ;;		_lcd_desenhaObstaculoA
   423 ;;		_lcd_desenhaObstaculoB
   424 ;;		_lcd_init
   425 ;;		_lcd_player
   426 ;;		_movA
   427 ;;		_movB
   428 ;; This function is called by:
   429 ;;		Startup code after reset
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text0
   434  000804                     __ptext0:
   435                           	callstack 0
   436  000804                     _main:
   437                           	callstack 24
   438  000804                     
   439                           ;main.c: 59:     configura();
   440  000804  EC8B  F006         	call	_configura	;wreg free
   441  000808                     
   442                           ;main.c: 60:     PORTD = 0;
   443  000808  0E00               	movlw	0
   444  00080A  6E83               	movwf	131,c	;volatile
   445  00080C                     
   446                           ;main.c: 61:     PORTE = 0;
   447  00080C  0E00               	movlw	0
   448  00080E  6E84               	movwf	132,c	;volatile
   449                           
   450                           ;main.c: 63:     lcd_init();
   451  000810  EC3E  F006         	call	_lcd_init	;wreg free
   452                           
   453                           ;main.c: 64:     lcd_clear();
   454  000814  ECF8  F006         	call	_lcd_clear	;wreg free
   455  000818                     
   456                           ;main.c: 65:     PORTBbits.RB0 = 0;
   457  000818  9081               	bcf	129,0,c	;volatile
   458  00081A                     
   459                           ;main.c: 66:     PORTBbits.RB2 = 0;
   460  00081A  9481               	bcf	129,2,c	;volatile
   461                           
   462                           ;main.c: 69:     lcd_player();
   463  00081C  EC79  F005         	call	_lcd_player	;wreg free
   464                           
   465                           ;main.c: 70:     lcd_desenhaObstaculoA();
   466  000820  EC18  F007         	call	_lcd_desenhaObstaculoA	;wreg free
   467  000824                     
   468                           ;main.c: 72:     char a1, a2, a3, a4, b1, b2, b3, b4, b5;;main.c: 73:     char p1, p2, p
      +                          3, p4, q1, q2, q3, q4, q5;;main.c: 75:     char flagA1, flagA2, flagA3, flagA4, flagB1, 
      +                          flagB2, flagB3, flagB4, flagB5;;main.c: 77:     p1 = p2 = p3 = p4 = 0x8F;
   469  000824  0E8F               	movlw	143
   470  000826  6E17               	movwf	main@p4^0,c
   471  000828  C017  F016         	movff	main@p4,main@p3
   472  00082C  C016  F015         	movff	main@p3,main@p2
   473  000830  C015  F014         	movff	main@p2,main@p1
   474  000834                     
   475                           ;main.c: 78:     q1 = q2 = q3 = q4 = q5 = 0xCF;
   476  000834  0ECF               	movlw	207
   477  000836  6E1C               	movwf	main@q5^0,c
   478  000838  C01C  F01B         	movff	main@q5,main@q4
   479  00083C  C01B  F01A         	movff	main@q4,main@q3
   480  000840  C01A  F019         	movff	main@q3,main@q2
   481  000844  C019  F018         	movff	main@q2,main@q1
   482  000848                     
   483                           ;main.c: 80:     a1 = a2 = a3 = a4 = b1 = b2 = b3 = b4 = b5 = 0;
   484  000848  0E00               	movlw	0
   485  00084A  6E24               	movwf	main@b5^0,c
   486  00084C  C024  F023         	movff	main@b5,main@b4
   487  000850  C023  F022         	movff	main@b4,main@b3
   488  000854  C022  F021         	movff	main@b3,main@b2
   489  000858  C021  F020         	movff	main@b2,main@b1
   490  00085C  C020  F01F         	movff	main@b1,main@a4
   491  000860  C01F  F01E         	movff	main@a4,main@a3
   492  000864  C01E  F01D         	movff	main@a3,main@a2
   493  000868  C01D  F02D         	movff	main@a2,main@a1
   494  00086C                     
   495                           ;main.c: 82:     flagA1 = flagA2 = flagA3 = flagA4 = flagB1 = flagB2 = flagB3 = flagB4 =
      +                           flagB5 = 0;
   496  00086C  0E00               	movlw	0
   497  00086E  6E2C               	movwf	main@flagB5^0,c
   498  000870  C02C  F02B         	movff	main@flagB5,main@flagB4
   499  000874  C02B  F02A         	movff	main@flagB4,main@flagB3
   500  000878  C02A  F029         	movff	main@flagB3,main@flagB2
   501  00087C  C029  F028         	movff	main@flagB2,main@flagB1
   502  000880  C028  F027         	movff	main@flagB1,main@flagA4
   503  000884  C027  F026         	movff	main@flagA4,main@flagA3
   504  000888  C026  F025         	movff	main@flagA3,main@flagA2
   505  00088C  C025  F013         	movff	main@flagA2,main@flagA1
   506  000890                     
   507                           ;main.c: 84:     x =0;
   508  000890  0E00               	movlw	0
   509  000892  6E2F               	movwf	(_x+1)^0,c
   510  000894  0E00               	movlw	0
   511  000896  6E2E               	movwf	_x^0,c
   512  000898  EF7E  F004         	goto	l1282
   513  00089C                     l1248:
   514                           
   515                           ;main.c: 90:                lcd_desenhaObstaculoB();
   516  00089C  EC0F  F007         	call	_lcd_desenhaObstaculoB	;wreg free
   517  0008A0                     
   518                           ;main.c: 91:                flagB1 = 1;
   519  0008A0  0E01               	movlw	1
   520  0008A2  6E28               	movwf	main@flagB1^0,c
   521                           
   522                           ;main.c: 92:                break;
   523  0008A4  EFAB  F004         	goto	l1284
   524  0008A8                     l1252:
   525                           
   526                           ;main.c: 94:                lcd_desenhaObstaculoA();
   527  0008A8  EC18  F007         	call	_lcd_desenhaObstaculoA	;wreg free
   528  0008AC                     
   529                           ;main.c: 95:                flagA2 = 1;
   530  0008AC  0E01               	movlw	1
   531  0008AE  6E25               	movwf	main@flagA2^0,c
   532                           
   533                           ;main.c: 96:                break;
   534  0008B0  EFAB  F004         	goto	l1284
   535  0008B4                     l1256:
   536                           
   537                           ;main.c: 98:                lcd_desenhaObstaculoB();
   538  0008B4  EC0F  F007         	call	_lcd_desenhaObstaculoB	;wreg free
   539  0008B8                     
   540                           ;main.c: 99:                flagB2 = 1;
   541  0008B8  0E01               	movlw	1
   542  0008BA  6E29               	movwf	main@flagB2^0,c
   543                           
   544                           ;main.c: 100:                break;
   545  0008BC  EFAB  F004         	goto	l1284
   546  0008C0                     l1260:
   547                           
   548                           ;main.c: 102:                lcd_desenhaObstaculoA();
   549  0008C0  EC18  F007         	call	_lcd_desenhaObstaculoA	;wreg free
   550  0008C4                     
   551                           ;main.c: 103:                flagA3 = 1;
   552  0008C4  0E01               	movlw	1
   553  0008C6  6E26               	movwf	main@flagA3^0,c
   554                           
   555                           ;main.c: 104:                break;
   556  0008C8  EFAB  F004         	goto	l1284
   557  0008CC                     l1264:
   558                           
   559                           ;main.c: 106:                lcd_desenhaObstaculoB();
   560  0008CC  EC0F  F007         	call	_lcd_desenhaObstaculoB	;wreg free
   561  0008D0                     
   562                           ;main.c: 107:                flagB3 = 1;
   563  0008D0  0E01               	movlw	1
   564  0008D2  6E2A               	movwf	main@flagB3^0,c
   565                           
   566                           ;main.c: 108:                break;
   567  0008D4  EFAB  F004         	goto	l1284
   568  0008D8                     l1268:
   569                           
   570                           ;main.c: 110:                lcd_desenhaObstaculoB();
   571  0008D8  EC0F  F007         	call	_lcd_desenhaObstaculoB	;wreg free
   572  0008DC                     
   573                           ;main.c: 111:                flagB4 = 1;
   574  0008DC  0E01               	movlw	1
   575  0008DE  6E2B               	movwf	main@flagB4^0,c
   576                           
   577                           ;main.c: 112:                break;
   578  0008E0  EFAB  F004         	goto	l1284
   579  0008E4                     l1272:
   580                           
   581                           ;main.c: 114:                lcd_desenhaObstaculoA();
   582  0008E4  EC18  F007         	call	_lcd_desenhaObstaculoA	;wreg free
   583  0008E8                     
   584                           ;main.c: 115:                flagA4 = 1;
   585  0008E8  0E01               	movlw	1
   586  0008EA  6E27               	movwf	main@flagA4^0,c
   587                           
   588                           ;main.c: 116:                break;
   589  0008EC  EFAB  F004         	goto	l1284
   590  0008F0                     l1276:
   591                           
   592                           ;main.c: 118:                lcd_desenhaObstaculoB();
   593  0008F0  EC0F  F007         	call	_lcd_desenhaObstaculoB	;wreg free
   594  0008F4                     
   595                           ;main.c: 119:                flagB5 = 1;
   596  0008F4  0E01               	movlw	1
   597  0008F6  6E2C               	movwf	main@flagB5^0,c
   598                           
   599                           ;main.c: 120:                break;
   600  0008F8  EFAB  F004         	goto	l1284
   601  0008FC                     l1282:
   602  0008FC  502D               	movf	main@a1^0,w,c
   603  0008FE  6E11               	movwf	??_main^0,c
   604  000900  6A12               	clrf	(??_main+1)^0,c
   605                           
   606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   607                           ; Switch size 1, requested type "simple"
   608                           ; Number of cases is 1, Range of values is 0 to 0
   609                           ; switch strategies available:
   610                           ; Name         Instructions Cycles
   611                           ; simple_byte            4     3 (average)
   612                           ;	Chosen strategy is simple_byte
   613  000902  5012               	movf	(??_main+1)^0,w,c
   614  000904  0A00               	xorlw	0	; case 0
   615  000906  B4D8               	btfsc	status,2,c
   616  000908  EF88  F004         	goto	l1342
   617  00090C  EFAB  F004         	goto	l1284
   618  000910                     l1342:
   619                           
   620                           ; Switch size 1, requested type "simple"
   621                           ; Number of cases is 8, Range of values is 2 to 15
   622                           ; switch strategies available:
   623                           ; Name         Instructions Cycles
   624                           ; simple_byte           25    13 (average)
   625                           ;	Chosen strategy is simple_byte
   626  000910  5011               	movf	??_main^0,w,c
   627  000912  0A02               	xorlw	2	; case 2
   628  000914  B4D8               	btfsc	status,2,c
   629  000916  EF4E  F004         	goto	l1248
   630  00091A  0A06               	xorlw	6	; case 4
   631  00091C  B4D8               	btfsc	status,2,c
   632  00091E  EF54  F004         	goto	l1252
   633  000922  0A02               	xorlw	2	; case 6
   634  000924  B4D8               	btfsc	status,2,c
   635  000926  EF5A  F004         	goto	l1256
   636  00092A  0A0E               	xorlw	14	; case 8
   637  00092C  B4D8               	btfsc	status,2,c
   638  00092E  EF60  F004         	goto	l1260
   639  000932  0A02               	xorlw	2	; case 10
   640  000934  B4D8               	btfsc	status,2,c
   641  000936  EF66  F004         	goto	l1264
   642  00093A  0A01               	xorlw	1	; case 11
   643  00093C  B4D8               	btfsc	status,2,c
   644  00093E  EF6C  F004         	goto	l1268
   645  000942  0A06               	xorlw	6	; case 13
   646  000944  B4D8               	btfsc	status,2,c
   647  000946  EF72  F004         	goto	l1272
   648  00094A  0A02               	xorlw	2	; case 15
   649  00094C  B4D8               	btfsc	status,2,c
   650  00094E  EF78  F004         	goto	l1276
   651  000952  EFAB  F004         	goto	l1284
   652  000956                     l1284:
   653                           
   654                           ;main.c: 123:        if(flagA2 == 1) movA(&p2, &a2, &flagA2);
   655  000956  0425               	decf	main@flagA2^0,w,c
   656  000958  A4D8               	btfss	status,2,c
   657  00095A  EFB1  F004         	goto	u181
   658  00095E  EFB3  F004         	goto	u180
   659  000962                     u181:
   660  000962  EFC1  F004         	goto	l1288
   661  000966                     u180:
   662  000966  0E15               	movlw	low main@p2
   663  000968  6E0A               	movwf	movA@p^0,c
   664  00096A  0E00               	movlw	high main@p2
   665  00096C  6E0B               	movwf	(movA@p+1)^0,c
   666  00096E  0E1D               	movlw	low main@a2
   667  000970  6E0C               	movwf	movA@a^0,c
   668  000972  0E00               	movlw	high main@a2
   669  000974  6E0D               	movwf	(movA@a+1)^0,c
   670  000976  0E25               	movlw	low main@flagA2
   671  000978  6E0E               	movwf	movA@flag^0,c
   672  00097A  0E00               	movlw	high main@flagA2
   673  00097C  6E0F               	movwf	(movA@flag+1)^0,c
   674  00097E  EC05  F006         	call	_movA	;wreg free
   675  000982                     l1288:
   676                           
   677                           ;main.c: 125:        if(flagA3 == 1) movA(&p3, &a3, &flagA3);
   678  000982  0426               	decf	main@flagA3^0,w,c
   679  000984  A4D8               	btfss	status,2,c
   680  000986  EFC7  F004         	goto	u191
   681  00098A  EFC9  F004         	goto	u190
   682  00098E                     u191:
   683  00098E  EFD7  F004         	goto	l1292
   684  000992                     u190:
   685  000992  0E16               	movlw	low main@p3
   686  000994  6E0A               	movwf	movA@p^0,c
   687  000996  0E00               	movlw	high main@p3
   688  000998  6E0B               	movwf	(movA@p+1)^0,c
   689  00099A  0E1E               	movlw	low main@a3
   690  00099C  6E0C               	movwf	movA@a^0,c
   691  00099E  0E00               	movlw	high main@a3
   692  0009A0  6E0D               	movwf	(movA@a+1)^0,c
   693  0009A2  0E26               	movlw	low main@flagA3
   694  0009A4  6E0E               	movwf	movA@flag^0,c
   695  0009A6  0E00               	movlw	high main@flagA3
   696  0009A8  6E0F               	movwf	(movA@flag+1)^0,c
   697  0009AA  EC05  F006         	call	_movA	;wreg free
   698  0009AE                     l1292:
   699                           
   700                           ;main.c: 127:        if(flagA4 == 1) movA(&p4, &a4, &flagA4);
   701  0009AE  0427               	decf	main@flagA4^0,w,c
   702  0009B0  A4D8               	btfss	status,2,c
   703  0009B2  EFDD  F004         	goto	u201
   704  0009B6  EFDF  F004         	goto	u200
   705  0009BA                     u201:
   706  0009BA  EFED  F004         	goto	l1296
   707  0009BE                     u200:
   708  0009BE  0E17               	movlw	low main@p4
   709  0009C0  6E0A               	movwf	movA@p^0,c
   710  0009C2  0E00               	movlw	high main@p4
   711  0009C4  6E0B               	movwf	(movA@p+1)^0,c
   712  0009C6  0E1F               	movlw	low main@a4
   713  0009C8  6E0C               	movwf	movA@a^0,c
   714  0009CA  0E00               	movlw	high main@a4
   715  0009CC  6E0D               	movwf	(movA@a+1)^0,c
   716  0009CE  0E27               	movlw	low main@flagA4
   717  0009D0  6E0E               	movwf	movA@flag^0,c
   718  0009D2  0E00               	movlw	high main@flagA4
   719  0009D4  6E0F               	movwf	(movA@flag+1)^0,c
   720  0009D6  EC05  F006         	call	_movA	;wreg free
   721  0009DA                     l1296:
   722                           
   723                           ;main.c: 129:        if(flagB1 == 1) movB(&q1, &b1, &flagB1);
   724  0009DA  0428               	decf	main@flagB1^0,w,c
   725  0009DC  A4D8               	btfss	status,2,c
   726  0009DE  EFF3  F004         	goto	u211
   727  0009E2  EFF5  F004         	goto	u210
   728  0009E6                     u211:
   729  0009E6  EF03  F005         	goto	l1300
   730  0009EA                     u210:
   731  0009EA  0E18               	movlw	low main@q1
   732  0009EC  6E0A               	movwf	movB@q^0,c
   733  0009EE  0E00               	movlw	high main@q1
   734  0009F0  6E0B               	movwf	(movB@q+1)^0,c
   735  0009F2  0E20               	movlw	low main@b1
   736  0009F4  6E0C               	movwf	movB@b^0,c
   737  0009F6  0E00               	movlw	high main@b1
   738  0009F8  6E0D               	movwf	(movB@b+1)^0,c
   739  0009FA  0E28               	movlw	low main@flagB1
   740  0009FC  6E0E               	movwf	movB@flag^0,c
   741  0009FE  0E00               	movlw	high main@flagB1
   742  000A00  6E0F               	movwf	(movB@flag+1)^0,c
   743  000A02  ECCA  F005         	call	_movB	;wreg free
   744  000A06                     l1300:
   745                           
   746                           ;main.c: 131:        if(flagB2 == 1) movB(&q2, &b2, &flagB2);
   747  000A06  0429               	decf	main@flagB2^0,w,c
   748  000A08  A4D8               	btfss	status,2,c
   749  000A0A  EF09  F005         	goto	u221
   750  000A0E  EF0B  F005         	goto	u220
   751  000A12                     u221:
   752  000A12  EF19  F005         	goto	l1304
   753  000A16                     u220:
   754  000A16  0E19               	movlw	low main@q2
   755  000A18  6E0A               	movwf	movB@q^0,c
   756  000A1A  0E00               	movlw	high main@q2
   757  000A1C  6E0B               	movwf	(movB@q+1)^0,c
   758  000A1E  0E21               	movlw	low main@b2
   759  000A20  6E0C               	movwf	movB@b^0,c
   760  000A22  0E00               	movlw	high main@b2
   761  000A24  6E0D               	movwf	(movB@b+1)^0,c
   762  000A26  0E29               	movlw	low main@flagB2
   763  000A28  6E0E               	movwf	movB@flag^0,c
   764  000A2A  0E00               	movlw	high main@flagB2
   765  000A2C  6E0F               	movwf	(movB@flag+1)^0,c
   766  000A2E  ECCA  F005         	call	_movB	;wreg free
   767  000A32                     l1304:
   768                           
   769                           ;main.c: 133:        if(flagB3 == 1) movB(&q3, &b3, &flagB3);
   770  000A32  042A               	decf	main@flagB3^0,w,c
   771  000A34  A4D8               	btfss	status,2,c
   772  000A36  EF1F  F005         	goto	u231
   773  000A3A  EF21  F005         	goto	u230
   774  000A3E                     u231:
   775  000A3E  EF2F  F005         	goto	l1308
   776  000A42                     u230:
   777  000A42  0E1A               	movlw	low main@q3
   778  000A44  6E0A               	movwf	movB@q^0,c
   779  000A46  0E00               	movlw	high main@q3
   780  000A48  6E0B               	movwf	(movB@q+1)^0,c
   781  000A4A  0E22               	movlw	low main@b3
   782  000A4C  6E0C               	movwf	movB@b^0,c
   783  000A4E  0E00               	movlw	high main@b3
   784  000A50  6E0D               	movwf	(movB@b+1)^0,c
   785  000A52  0E2A               	movlw	low main@flagB3
   786  000A54  6E0E               	movwf	movB@flag^0,c
   787  000A56  0E00               	movlw	high main@flagB3
   788  000A58  6E0F               	movwf	(movB@flag+1)^0,c
   789  000A5A  ECCA  F005         	call	_movB	;wreg free
   790  000A5E                     l1308:
   791                           
   792                           ;main.c: 135:        if(flagB4 == 1) movB(&q4, &b4, &flagB4);
   793  000A5E  042B               	decf	main@flagB4^0,w,c
   794  000A60  A4D8               	btfss	status,2,c
   795  000A62  EF35  F005         	goto	u241
   796  000A66  EF37  F005         	goto	u240
   797  000A6A                     u241:
   798  000A6A  EF45  F005         	goto	l1312
   799  000A6E                     u240:
   800  000A6E  0E1B               	movlw	low main@q4
   801  000A70  6E0A               	movwf	movB@q^0,c
   802  000A72  0E00               	movlw	high main@q4
   803  000A74  6E0B               	movwf	(movB@q+1)^0,c
   804  000A76  0E23               	movlw	low main@b4
   805  000A78  6E0C               	movwf	movB@b^0,c
   806  000A7A  0E00               	movlw	high main@b4
   807  000A7C  6E0D               	movwf	(movB@b+1)^0,c
   808  000A7E  0E2B               	movlw	low main@flagB4
   809  000A80  6E0E               	movwf	movB@flag^0,c
   810  000A82  0E00               	movlw	high main@flagB4
   811  000A84  6E0F               	movwf	(movB@flag+1)^0,c
   812  000A86  ECCA  F005         	call	_movB	;wreg free
   813  000A8A                     l1312:
   814                           
   815                           ;main.c: 137:        if(flagB5 == 1) movB(&q5, &b5, &flagB5);
   816  000A8A  042C               	decf	main@flagB5^0,w,c
   817  000A8C  A4D8               	btfss	status,2,c
   818  000A8E  EF4B  F005         	goto	u251
   819  000A92  EF4D  F005         	goto	u250
   820  000A96                     u251:
   821  000A96  EF5B  F005         	goto	l102
   822  000A9A                     u250:
   823  000A9A  0E1C               	movlw	low main@q5
   824  000A9C  6E0A               	movwf	movB@q^0,c
   825  000A9E  0E00               	movlw	high main@q5
   826  000AA0  6E0B               	movwf	(movB@q+1)^0,c
   827  000AA2  0E24               	movlw	low main@b5
   828  000AA4  6E0C               	movwf	movB@b^0,c
   829  000AA6  0E00               	movlw	high main@b5
   830  000AA8  6E0D               	movwf	(movB@b+1)^0,c
   831  000AAA  0E2C               	movlw	low main@flagB5
   832  000AAC  6E0E               	movwf	movB@flag^0,c
   833  000AAE  0E00               	movlw	high main@flagB5
   834  000AB0  6E0F               	movwf	(movB@flag+1)^0,c
   835  000AB2  ECCA  F005         	call	_movB	;wreg free
   836  000AB6                     l102:
   837                           
   838                           ;main.c: 139:       movA(&p1, &a1, &flagA1);
   839  000AB6  0E14               	movlw	low main@p1
   840  000AB8  6E0A               	movwf	movA@p^0,c
   841  000ABA  0E00               	movlw	high main@p1
   842  000ABC  6E0B               	movwf	(movA@p+1)^0,c
   843  000ABE  0E2D               	movlw	low main@a1
   844  000AC0  6E0C               	movwf	movA@a^0,c
   845  000AC2  0E00               	movlw	high main@a1
   846  000AC4  6E0D               	movwf	(movA@a+1)^0,c
   847  000AC6  0E13               	movlw	low main@flagA1
   848  000AC8  6E0E               	movwf	movA@flag^0,c
   849  000ACA  0E00               	movlw	high main@flagA1
   850  000ACC  6E0F               	movwf	(movA@flag+1)^0,c
   851  000ACE  EC05  F006         	call	_movA	;wreg free
   852  000AD2                     
   853                           ;main.c: 141:       _delay((unsigned long)((1000)*(20000000/4000.0)));
   854  000AD2  0E1A               	movlw	26
   855  000AD4  6E12               	movwf	(??_main+1)^0,c
   856  000AD6  0E5E               	movlw	94
   857  000AD8  6E11               	movwf	??_main^0,c
   858  000ADA  0E6E               	movlw	110
   859  000ADC                     u277:
   860  000ADC  2EE8               	decfsz	wreg,f,c
   861  000ADE  D7FE               	bra	u277
   862  000AE0  2E11               	decfsz	??_main^0,f,c
   863  000AE2  D7FC               	bra	u277
   864  000AE4  2E12               	decfsz	(??_main+1)^0,f,c
   865  000AE6  D7FA               	bra	u277
   866  000AE8  D000               	nop2	
   867  000AEA  EF7E  F004         	goto	l1282
   868  000AEE  EF07  F000         	goto	start
   869  000AF2                     __end_of_main:
   870                           	callstack 0
   871                           
   872 ;; *************** function _movB *****************
   873 ;; Defined at:
   874 ;;		line 44 in file "main.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  q               2    9[COMRAM] PTR unsigned char 
   877 ;;		 -> main@q5(1), main@q4(1), main@q3(1), main@q2(1), 
   878 ;;		 -> main@q1(1), 
   879 ;;  b               2   11[COMRAM] PTR unsigned char 
   880 ;;		 -> main@b5(1), main@b4(1), main@b3(1), main@b2(1), 
   881 ;;		 -> main@b1(1), 
   882 ;;  flag            2   13[COMRAM] PTR unsigned char 
   883 ;;		 -> main@flagB5(1), main@flagB4(1), main@flagB3(1), main@flagB2(1), 
   884 ;;		 -> main@flagB1(1), 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   896 ;;      Params:         6       0       0       0       0       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0       0       0       0       0
   898 ;;      Temps:          1       0       0       0       0       0       0       0       0
   899 ;;      Totals:         7       0       0       0       0       0       0       0       0
   900 ;;Total ram usage:        7 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 6
   903 ;; This function calls:
   904 ;;		_lcd_apaga
   905 ;;		_lcd_movimentoObstaculo
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text1
   912  000B94                     __ptext1:
   913                           	callstack 0
   914  000B94                     _movB:
   915                           	callstack 24
   916  000B94                     
   917                           ;main.c: 45:     *q = lcd_movimentoObstaculo(*q);
   918  000B94  C00A  FFD9         	movff	movB@q,fsr2l
   919  000B98  C00B  FFDA         	movff	movB@q+1,fsr2h
   920  000B9C  50DF               	movf	indf2,w,c
   921  000B9E  ECA2  F006         	call	_lcd_movimentoObstaculo
   922  000BA2  C00A  FFD9         	movff	movB@q,fsr2l
   923  000BA6  C00B  FFDA         	movff	movB@q+1,fsr2h
   924  000BAA  6EDF               	movwf	indf2,c
   925  000BAC                     
   926                           ;main.c: 47:     if(*b >= 16){
   927  000BAC  C00C  FFD9         	movff	movB@b,fsr2l
   928  000BB0  C00D  FFDA         	movff	movB@b+1,fsr2h
   929  000BB4  0E0F               	movlw	15
   930  000BB6  64DF               	cpfsgt	indf2,c
   931  000BB8  EFE0  F005         	goto	u161
   932  000BBC  EFE2  F005         	goto	u160
   933  000BC0                     u161:
   934  000BC0  EFF8  F005         	goto	l1216
   935  000BC4                     u160:
   936  000BC4                     
   937                           ;main.c: 48:         lcd_apaga();
   938  000BC4  EC04  F007         	call	_lcd_apaga	;wreg free
   939  000BC8                     
   940                           ;main.c: 49:         *b = 0;
   941  000BC8  C00C  FFD9         	movff	movB@b,fsr2l
   942  000BCC  C00D  FFDA         	movff	movB@b+1,fsr2h
   943  000BD0  0E00               	movlw	0
   944  000BD2  6EDF               	movwf	indf2,c
   945  000BD4                     
   946                           ;main.c: 50:         *flag = 0;
   947  000BD4  C00E  FFD9         	movff	movB@flag,fsr2l
   948  000BD8  C00F  FFDA         	movff	movB@flag+1,fsr2h
   949  000BDC  0E00               	movlw	0
   950  000BDE  6EDF               	movwf	indf2,c
   951  000BE0                     
   952                           ;main.c: 51:         *q = 0xCF;
   953  000BE0  C00A  FFD9         	movff	movB@q,fsr2l
   954  000BE4  C00B  FFDA         	movff	movB@q+1,fsr2h
   955  000BE8  0ECF               	movlw	207
   956  000BEA  6EDF               	movwf	indf2,c
   957                           
   958                           ;main.c: 52:     }
   959  000BEC  EF04  F006         	goto	l79
   960  000BF0                     l1216:
   961  000BF0  C00C  FFD9         	movff	movB@b,fsr2l
   962  000BF4  C00D  FFDA         	movff	movB@b+1,fsr2h
   963  000BF8  50DF               	movf	indf2,w,c
   964  000BFA  6E10               	movwf	??_movB^0,c
   965  000BFC  2810               	incf	??_movB^0,w,c
   966  000BFE  C00C  FFD9         	movff	movB@b,fsr2l
   967  000C02  C00D  FFDA         	movff	movB@b+1,fsr2h
   968  000C06  6EDF               	movwf	indf2,c
   969  000C08                     l79:
   970  000C08  0012               	return		;funcret
   971  000C0A                     __end_of_movB:
   972                           	callstack 0
   973                           
   974 ;; *************** function _lcd_apaga *****************
   975 ;; Defined at:
   976 ;;		line 175 in file "lcd.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   990 ;;      Params:         0       0       0       0       0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0
   993 ;;      Totals:         0       0       0       0       0       0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used: 1
   996 ;; Hardware stack levels required when called: 5
   997 ;; This function calls:
   998 ;;		_lcd_puts
   999 ;;		_lcd_write
  1000 ;; This function is called by:
  1001 ;;		_movB
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text2
  1006  000E08                     __ptext2:
  1007                           	callstack 0
  1008  000E08                     _lcd_apaga:
  1009                           	callstack 24
  1010  000E08                     
  1011                           ;lcd.c: 176:     LE0 = 0;
  1012  000E08  908D               	bcf	3981,0,c	;volatile
  1013  000E0A                     
  1014                           ;lcd.c: 177:     lcd_write(0xC0);
  1015  000E0A  0EC0               	movlw	192
  1016  000E0C  ECDC  F006         	call	_lcd_write
  1017  000E10                     
  1018                           ;lcd.c: 178:     lcd_puts(" ");
  1019  000E10  0E01               	movlw	low STR_1
  1020  000E12  6E07               	movwf	lcd_puts@s^0,c
  1021  000E14  0E08               	movlw	high STR_1
  1022  000E16  6E08               	movwf	(lcd_puts@s+1)^0,c
  1023  000E18  EC6F  F006         	call	_lcd_puts	;wreg free
  1024  000E1C  0012               	return		;funcret
  1025  000E1E                     __end_of_lcd_apaga:
  1026                           	callstack 0
  1027                           
  1028 ;; *************** function _movA *****************
  1029 ;; Defined at:
  1030 ;;		line 30 in file "main.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  p               2    9[COMRAM] PTR unsigned char 
  1033 ;;		 -> main@p4(1), main@p3(1), main@p2(1), main@p1(1), 
  1034 ;;  a               2   11[COMRAM] PTR unsigned char 
  1035 ;;		 -> main@a4(1), main@a3(1), main@a2(1), main@a1(1), 
  1036 ;;  flag            2   13[COMRAM] PTR unsigned char 
  1037 ;;		 -> main@flagA4(1), main@flagA3(1), main@flagA2(1), main@flagA1(1), 
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1049 ;;      Params:         6       0       0       0       0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1051 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1052 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1053 ;;Total ram usage:        7 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 6
  1056 ;; This function calls:
  1057 ;;		_lcd_movimentoObstaculo
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text3
  1064  000C0A                     __ptext3:
  1065                           	callstack 0
  1066  000C0A                     _movA:
  1067                           	callstack 24
  1068  000C0A                     
  1069                           ;main.c: 31:     *p = lcd_movimentoObstaculo(*p);
  1070  000C0A  C00A  FFD9         	movff	movA@p,fsr2l
  1071  000C0E  C00B  FFDA         	movff	movA@p+1,fsr2h
  1072  000C12  50DF               	movf	indf2,w,c
  1073  000C14  ECA2  F006         	call	_lcd_movimentoObstaculo
  1074  000C18  C00A  FFD9         	movff	movA@p,fsr2l
  1075  000C1C  C00B  FFDA         	movff	movA@p+1,fsr2h
  1076  000C20  6EDF               	movwf	indf2,c
  1077  000C22                     
  1078                           ;main.c: 33:     if(*a >= 16){
  1079  000C22  C00C  FFD9         	movff	movA@a,fsr2l
  1080  000C26  C00D  FFDA         	movff	movA@a+1,fsr2h
  1081  000C2A  0E0F               	movlw	15
  1082  000C2C  64DF               	cpfsgt	indf2,c
  1083  000C2E  EF1B  F006         	goto	u151
  1084  000C32  EF1D  F006         	goto	u150
  1085  000C36                     u151:
  1086  000C36  EF31  F006         	goto	l1202
  1087  000C3A                     u150:
  1088  000C3A                     
  1089                           ;main.c: 34:         *a = 0;
  1090  000C3A  C00C  FFD9         	movff	movA@a,fsr2l
  1091  000C3E  C00D  FFDA         	movff	movA@a+1,fsr2h
  1092  000C42  0E00               	movlw	0
  1093  000C44  6EDF               	movwf	indf2,c
  1094                           
  1095                           ;main.c: 35:         *flag = 0;
  1096  000C46  C00E  FFD9         	movff	movA@flag,fsr2l
  1097  000C4A  C00F  FFDA         	movff	movA@flag+1,fsr2h
  1098  000C4E  0E00               	movlw	0
  1099  000C50  6EDF               	movwf	indf2,c
  1100                           
  1101                           ;main.c: 36:         *p = 0x8F;
  1102  000C52  C00A  FFD9         	movff	movA@p,fsr2l
  1103  000C56  C00B  FFDA         	movff	movA@p+1,fsr2h
  1104  000C5A  0E8F               	movlw	143
  1105  000C5C  6EDF               	movwf	indf2,c
  1106                           
  1107                           ;main.c: 38:     }
  1108  000C5E  EF3D  F006         	goto	l74
  1109  000C62                     l1202:
  1110                           
  1111                           ;main.c: 40:         *a = *a + 1;
  1112  000C62  C00C  FFD9         	movff	movA@a,fsr2l
  1113  000C66  C00D  FFDA         	movff	movA@a+1,fsr2h
  1114  000C6A  50DF               	movf	indf2,w,c
  1115  000C6C  6E10               	movwf	??_movA^0,c
  1116  000C6E  2810               	incf	??_movA^0,w,c
  1117  000C70  C00C  FFD9         	movff	movA@a,fsr2l
  1118  000C74  C00D  FFDA         	movff	movA@a+1,fsr2h
  1119  000C78  6EDF               	movwf	indf2,c
  1120  000C7A                     l74:
  1121  000C7A  0012               	return		;funcret
  1122  000C7C                     __end_of_movA:
  1123                           	callstack 0
  1124                           
  1125 ;; *************** function _lcd_movimentoObstaculo *****************
  1126 ;; Defined at:
  1127 ;;		line 160 in file "lcd.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  pos             1    wreg     unsigned char 
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  pos             1    8[COMRAM] unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      unsigned char 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0
  1142 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1144 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1145 ;;Total ram usage:        1 bytes
  1146 ;; Hardware stack levels used: 1
  1147 ;; Hardware stack levels required when called: 5
  1148 ;; This function calls:
  1149 ;;		_lcd_puts
  1150 ;;		_lcd_write
  1151 ;; This function is called by:
  1152 ;;		_movA
  1153 ;;		_movB
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text4
  1158  000D44                     __ptext4:
  1159                           	callstack 0
  1160  000D44                     _lcd_movimentoObstaculo:
  1161                           	callstack 24
  1162                           
  1163                           ;incstack = 0
  1164                           ;lcd_movimentoObstaculo@pos stored from wreg
  1165  000D44  6E09               	movwf	lcd_movimentoObstaculo@pos^0,c
  1166  000D46                     
  1167                           ;lcd.c: 162:     LE0 = 0;
  1168  000D46  908D               	bcf	3981,0,c	;volatile
  1169  000D48                     
  1170                           ;lcd.c: 163:     lcd_write(pos+1);
  1171  000D48  2809               	incf	lcd_movimentoObstaculo@pos^0,w,c
  1172  000D4A  ECDC  F006         	call	_lcd_write
  1173  000D4E                     
  1174                           ;lcd.c: 164:     lcd_puts(" ");
  1175  000D4E  0E01               	movlw	low STR_1
  1176  000D50  6E07               	movwf	lcd_puts@s^0,c
  1177  000D52  0E08               	movlw	high STR_1
  1178  000D54  6E08               	movwf	(lcd_puts@s+1)^0,c
  1179  000D56  EC6F  F006         	call	_lcd_puts	;wreg free
  1180  000D5A                     
  1181                           ;lcd.c: 166:     LE0 = 0;
  1182  000D5A  908D               	bcf	3981,0,c	;volatile
  1183  000D5C                     
  1184                           ;lcd.c: 167:     lcd_write(pos--);
  1185  000D5C  5009               	movf	lcd_movimentoObstaculo@pos^0,w,c
  1186  000D5E  ECDC  F006         	call	_lcd_write
  1187  000D62  0609               	decf	lcd_movimentoObstaculo@pos^0,f,c
  1188  000D64                     
  1189                           ;lcd.c: 169:     LE0 = 1;
  1190  000D64  808D               	bsf	3981,0,c	;volatile
  1191  000D66                     
  1192                           ;lcd.c: 170:     lcd_write(0x09);
  1193  000D66  0E09               	movlw	9
  1194  000D68  ECDC  F006         	call	_lcd_write
  1195  000D6C                     
  1196                           ;lcd.c: 172:     return pos;
  1197  000D6C  5009               	movf	lcd_movimentoObstaculo@pos^0,w,c
  1198  000D6E  0012               	return		;funcret
  1199  000D70                     __end_of_lcd_movimentoObstaculo:
  1200                           	callstack 0
  1201                           
  1202 ;; *************** function _lcd_puts *****************
  1203 ;; Defined at:
  1204 ;;		line 62 in file "lcd.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1207 ;;		 -> STR_2(2), STR_1(2), 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1219 ;;      Params:         2       0       0       0       0       0       0       0       0
  1220 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1222 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1223 ;;Total ram usage:        2 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 4
  1226 ;; This function calls:
  1227 ;;		_lcd_write
  1228 ;; This function is called by:
  1229 ;;		_lcd_movimentoObstaculo
  1230 ;;		_lcd_apaga
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text5
  1235  000CDE                     __ptext5:
  1236                           	callstack 0
  1237  000CDE                     _lcd_puts:
  1238                           	callstack 24
  1239  000CDE                     
  1240                           ;lcd.c: 62: lcd_puts(const char * s);lcd.c: 63: {;lcd.c: 64:  LE0 = 1;
  1241  000CDE  808D               	bsf	3981,0,c	;volatile
  1242                           
  1243                           ;lcd.c: 65:  while(*s)
  1244  000CE0  EF7C  F006         	goto	l1156
  1245  000CE4                     l1152:
  1246                           
  1247                           ;lcd.c: 66:   lcd_write(*s++);
  1248  000CE4  C007  FFF6         	movff	lcd_puts@s,tblptrl
  1249  000CE8  C008  FFF7         	movff	lcd_puts@s+1,tblptrh
  1250  000CEC                     	if	0	;tblptru may be non-zero
  1251  000CEC                     	endif
  1252  000CEC                     	if	0	;tblptru may be non-zero
  1253  000CEC                     	endif
  1254  000CEC  0008               	tblrd		*
  1255  000CEE  50F5               	movf	tablat,w,c
  1256  000CF0  ECDC  F006         	call	_lcd_write
  1257  000CF4  4A07               	infsnz	lcd_puts@s^0,f,c
  1258  000CF6  2A08               	incf	(lcd_puts@s+1)^0,f,c
  1259  000CF8                     l1156:
  1260                           
  1261                           ;lcd.c: 65:  while(*s)
  1262  000CF8  C007  FFF6         	movff	lcd_puts@s,tblptrl
  1263  000CFC  C008  FFF7         	movff	lcd_puts@s+1,tblptrh
  1264  000D00                     	if	0	;tblptru may be non-zero
  1265  000D00                     	endif
  1266  000D00                     	if	0	;tblptru may be non-zero
  1267  000D00                     	endif
  1268  000D00  0008               	tblrd		*
  1269  000D02  50F5               	movf	tablat,w,c
  1270  000D04  0900               	iorlw	0
  1271  000D06  A4D8               	btfss	status,2,c
  1272  000D08  EF88  F006         	goto	u141
  1273  000D0C  EF8A  F006         	goto	u140
  1274  000D10                     u141:
  1275  000D10  EF72  F006         	goto	l1152
  1276  000D14                     u140:
  1277  000D14  0012               	return		;funcret
  1278  000D16                     __end_of_lcd_puts:
  1279                           	callstack 0
  1280                           
  1281 ;; *************** function _lcd_player *****************
  1282 ;; Defined at:
  1283 ;;		line 91 in file "lcd.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1297 ;;      Params:         0       0       0       0       0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1299 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1300 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1301 ;;Total ram usage:        2 bytes
  1302 ;; Hardware stack levels used: 1
  1303 ;; Hardware stack levels required when called: 4
  1304 ;; This function calls:
  1305 ;;		_lcd_write
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text6
  1312  000AF2                     __ptext6:
  1313                           	callstack 0
  1314  000AF2                     _lcd_player:
  1315                           	callstack 26
  1316  000AF2                     
  1317                           ;lcd.c: 93:     LE0 = 0;
  1318  000AF2  908D               	bcf	3981,0,c	;volatile
  1319  000AF4                     
  1320                           ;lcd.c: 94:     lcd_write(0x40);
  1321  000AF4  0E40               	movlw	64
  1322  000AF6  ECDC  F006         	call	_lcd_write
  1323  000AFA                     
  1324                           ;lcd.c: 96:     LE0 = 1;
  1325  000AFA  808D               	bsf	3981,0,c	;volatile
  1326                           
  1327                           ;lcd.c: 97:     lcd_write(0x0E);
  1328  000AFC  0E0E               	movlw	14
  1329  000AFE  ECDC  F006         	call	_lcd_write
  1330                           
  1331                           ;lcd.c: 98:     lcd_write(0x0A);
  1332  000B02  0E0A               	movlw	10
  1333  000B04  ECDC  F006         	call	_lcd_write
  1334                           
  1335                           ;lcd.c: 99:     lcd_write(0x1F);
  1336  000B08  0E1F               	movlw	31
  1337  000B0A  ECDC  F006         	call	_lcd_write
  1338                           
  1339                           ;lcd.c: 100:     lcd_write(0x1F);
  1340  000B0E  0E1F               	movlw	31
  1341  000B10  ECDC  F006         	call	_lcd_write
  1342                           
  1343                           ;lcd.c: 101:     lcd_write(0x1F);
  1344  000B14  0E1F               	movlw	31
  1345  000B16  ECDC  F006         	call	_lcd_write
  1346                           
  1347                           ;lcd.c: 102:     lcd_write(0x0A);
  1348  000B1A  0E0A               	movlw	10
  1349  000B1C  ECDC  F006         	call	_lcd_write
  1350                           
  1351                           ;lcd.c: 103:     lcd_write(0x0A);
  1352  000B20  0E0A               	movlw	10
  1353  000B22  ECDC  F006         	call	_lcd_write
  1354                           
  1355                           ;lcd.c: 104:     lcd_write(0x00);
  1356  000B26  0E00               	movlw	0
  1357  000B28  ECDC  F006         	call	_lcd_write
  1358  000B2C                     
  1359                           ;lcd.c: 106:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1360  000B2C  0E02               	movlw	2
  1361  000B2E  6E08               	movwf	(??_lcd_player+1)^0,c
  1362  000B30  0E45               	movlw	69
  1363  000B32  6E07               	movwf	??_lcd_player^0,c
  1364  000B34  0EAA               	movlw	170
  1365  000B36                     u287:
  1366  000B36  2EE8               	decfsz	wreg,f,c
  1367  000B38  D7FE               	bra	u287
  1368  000B3A  2E07               	decfsz	??_lcd_player^0,f,c
  1369  000B3C  D7FC               	bra	u287
  1370  000B3E  2E08               	decfsz	(??_lcd_player+1)^0,f,c
  1371  000B40  D7FA               	bra	u287
  1372  000B42                     
  1373                           ;lcd.c: 108:     LE0 = 0;
  1374  000B42  908D               	bcf	3981,0,c	;volatile
  1375  000B44                     
  1376                           ;lcd.c: 109:     lcd_write(0x48);
  1377  000B44  0E48               	movlw	72
  1378  000B46  ECDC  F006         	call	_lcd_write
  1379  000B4A                     
  1380                           ;lcd.c: 111:     LE0 = 1;
  1381  000B4A  808D               	bsf	3981,0,c	;volatile
  1382  000B4C                     
  1383                           ;lcd.c: 112:     lcd_write(0x0A);
  1384  000B4C  0E0A               	movlw	10
  1385  000B4E  ECDC  F006         	call	_lcd_write
  1386  000B52                     
  1387                           ;lcd.c: 113:     lcd_write(0x1F);
  1388  000B52  0E1F               	movlw	31
  1389  000B54  ECDC  F006         	call	_lcd_write
  1390  000B58                     
  1391                           ;lcd.c: 114:     lcd_write(0x15);
  1392  000B58  0E15               	movlw	21
  1393  000B5A  ECDC  F006         	call	_lcd_write
  1394  000B5E                     
  1395                           ;lcd.c: 115:     lcd_write(0x1F);
  1396  000B5E  0E1F               	movlw	31
  1397  000B60  ECDC  F006         	call	_lcd_write
  1398  000B64                     
  1399                           ;lcd.c: 116:     lcd_write(0x11);
  1400  000B64  0E11               	movlw	17
  1401  000B66  ECDC  F006         	call	_lcd_write
  1402  000B6A                     
  1403                           ;lcd.c: 117:     lcd_write(0x1F);
  1404  000B6A  0E1F               	movlw	31
  1405  000B6C  ECDC  F006         	call	_lcd_write
  1406  000B70                     
  1407                           ;lcd.c: 118:     lcd_write(0x0A);
  1408  000B70  0E0A               	movlw	10
  1409  000B72  ECDC  F006         	call	_lcd_write
  1410  000B76                     
  1411                           ;lcd.c: 119:     lcd_write(0x00);
  1412  000B76  0E00               	movlw	0
  1413  000B78  ECDC  F006         	call	_lcd_write
  1414                           
  1415                           ;lcd.c: 121:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1416  000B7C  0E02               	movlw	2
  1417  000B7E  6E08               	movwf	(??_lcd_player+1)^0,c
  1418  000B80  0E45               	movlw	69
  1419  000B82  6E07               	movwf	??_lcd_player^0,c
  1420  000B84  0EAA               	movlw	170
  1421  000B86                     u297:
  1422  000B86  2EE8               	decfsz	wreg,f,c
  1423  000B88  D7FE               	bra	u297
  1424  000B8A  2E07               	decfsz	??_lcd_player^0,f,c
  1425  000B8C  D7FC               	bra	u297
  1426  000B8E  2E08               	decfsz	(??_lcd_player+1)^0,f,c
  1427  000B90  D7FA               	bra	u297
  1428  000B92  0012               	return		;funcret
  1429  000B94                     __end_of_lcd_player:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function _lcd_init *****************
  1433 ;; Defined at:
  1434 ;;		line 213 in file "lcd.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  init_value      1    0        unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1448 ;;      Params:         0       0       0       0       0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1450 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1451 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1452 ;;Total ram usage:        1 bytes
  1453 ;; Hardware stack levels used: 1
  1454 ;; Hardware stack levels required when called: 5
  1455 ;; This function calls:
  1456 ;;		_lcd_clear
  1457 ;;		_lcd_write
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text7
  1464  000C7C                     __ptext7:
  1465                           	callstack 0
  1466  000C7C                     _lcd_init:
  1467                           	callstack 25
  1468  000C7C                     
  1469                           ;lcd.c: 219:  LE0 = 0;
  1470  000C7C  908D               	bcf	3981,0,c	;volatile
  1471  000C7E                     
  1472                           ;lcd.c: 220:  LE1 = 0;
  1473  000C7E  928D               	bcf	3981,1,c	;volatile
  1474  000C80                     
  1475                           ;lcd.c: 223:  _delay((unsigned long)((15)*(20000000/4000.0)));
  1476  000C80  0E62               	movlw	98
  1477  000C82  6E08               	movwf	??_lcd_init^0,c
  1478  000C84  0E66               	movlw	102
  1479  000C86                     u307:
  1480  000C86  2EE8               	decfsz	wreg,f,c
  1481  000C88  D7FE               	bra	u307
  1482  000C8A  2E08               	decfsz	??_lcd_init^0,f,c
  1483  000C8C  D7FC               	bra	u307
  1484  000C8E                     
  1485                           ;lcd.c: 224:  PORTD = init_value;
  1486  000C8E  0E03               	movlw	3
  1487  000C90  6E83               	movwf	131,c	;volatile
  1488  000C92                     
  1489                           ;lcd.c: 225:  ((LE1 = 1),(LE1=0));
  1490  000C92  828D               	bsf	3981,1,c	;volatile
  1491  000C94  928D               	bcf	3981,1,c	;volatile
  1492  000C96                     
  1493                           ;lcd.c: 226:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1494  000C96  0E21               	movlw	33
  1495  000C98  6E08               	movwf	??_lcd_init^0,c
  1496  000C9A  0E76               	movlw	118
  1497  000C9C                     u317:
  1498  000C9C  2EE8               	decfsz	wreg,f,c
  1499  000C9E  D7FE               	bra	u317
  1500  000CA0  2E08               	decfsz	??_lcd_init^0,f,c
  1501  000CA2  D7FC               	bra	u317
  1502  000CA4  D000               	nop2	
  1503  000CA6                     
  1504                           ;lcd.c: 227:  ((LE1 = 1),(LE1=0));
  1505  000CA6  828D               	bsf	3981,1,c	;volatile
  1506  000CA8  928D               	bcf	3981,1,c	;volatile
  1507  000CAA                     
  1508                           ;lcd.c: 228:  _delay((unsigned long)((200)*(20000000/4000000.0)));
  1509  000CAA  0EC8               	movlw	200
  1510  000CAC                     u327:
  1511  000CAC  D000               	nop2	
  1512  000CAE  2EE8               	decfsz	wreg,f,c
  1513  000CB0  D7FD               	bra	u327
  1514  000CB2                     
  1515                           ;lcd.c: 229:  ((LE1 = 1),(LE1=0));
  1516  000CB2  828D               	bsf	3981,1,c	;volatile
  1517  000CB4  928D               	bcf	3981,1,c	;volatile
  1518  000CB6                     
  1519                           ;lcd.c: 230:  _delay((unsigned long)((200)*(20000000/4000000.0)));
  1520  000CB6  0EC8               	movlw	200
  1521  000CB8                     u337:
  1522  000CB8  D000               	nop2	
  1523  000CBA  2EE8               	decfsz	wreg,f,c
  1524  000CBC  D7FD               	bra	u337
  1525                           
  1526                           ;lcd.c: 231:  PORTD = 2;
  1527  000CBE  0E02               	movlw	2
  1528  000CC0  6E83               	movwf	131,c	;volatile
  1529  000CC2                     
  1530                           ;lcd.c: 232:  ((LE1 = 1),(LE1=0));
  1531  000CC2  828D               	bsf	3981,1,c	;volatile
  1532  000CC4  928D               	bcf	3981,1,c	;volatile
  1533  000CC6                     
  1534                           ;lcd.c: 234:  lcd_write(0x38);
  1535  000CC6  0E38               	movlw	56
  1536  000CC8  ECDC  F006         	call	_lcd_write
  1537  000CCC                     
  1538                           ;lcd.c: 235:  lcd_write(0x06);
  1539  000CCC  0E06               	movlw	6
  1540  000CCE  ECDC  F006         	call	_lcd_write
  1541  000CD2                     
  1542                           ;lcd.c: 236:  lcd_write(0x0C);
  1543  000CD2  0E0C               	movlw	12
  1544  000CD4  ECDC  F006         	call	_lcd_write
  1545  000CD8                     
  1546                           ;lcd.c: 237:  lcd_clear();
  1547  000CD8  ECF8  F006         	call	_lcd_clear	;wreg free
  1548  000CDC  0012               	return		;funcret
  1549  000CDE                     __end_of_lcd_init:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function _lcd_clear *****************
  1553 ;; Defined at:
  1554 ;;		line 52 in file "lcd.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;		None
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1568 ;;      Params:         0       0       0       0       0       0       0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1570 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1571 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1572 ;;Total ram usage:        1 bytes
  1573 ;; Hardware stack levels used: 1
  1574 ;; Hardware stack levels required when called: 4
  1575 ;; This function calls:
  1576 ;;		_lcd_write
  1577 ;; This function is called by:
  1578 ;;		_main
  1579 ;;		_lcd_init
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text8
  1584  000DF0                     __ptext8:
  1585                           	callstack 0
  1586  000DF0                     _lcd_clear:
  1587                           	callstack 25
  1588  000DF0                     
  1589                           ;lcd.c: 54:  LE0 = 0;
  1590  000DF0  908D               	bcf	3981,0,c	;volatile
  1591  000DF2                     
  1592                           ;lcd.c: 55:  lcd_write(0x01);
  1593  000DF2  0E01               	movlw	1
  1594  000DF4  ECDC  F006         	call	_lcd_write
  1595  000DF8                     
  1596                           ;lcd.c: 56:  _delay((unsigned long)((2)*(20000000/4000.0)));
  1597  000DF8  0E0D               	movlw	13
  1598  000DFA  6E07               	movwf	??_lcd_clear^0,c
  1599  000DFC  0EFC               	movlw	252
  1600  000DFE                     u347:
  1601  000DFE  2EE8               	decfsz	wreg,f,c
  1602  000E00  D7FE               	bra	u347
  1603  000E02  2E07               	decfsz	??_lcd_clear^0,f,c
  1604  000E04  D7FC               	bra	u347
  1605  000E06  0012               	return		;funcret
  1606  000E08                     __end_of_lcd_clear:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _lcd_desenhaObstaculoB *****************
  1610 ;; Defined at:
  1611 ;;		line 142 in file "lcd.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 4
  1632 ;; This function calls:
  1633 ;;		_lcd_write
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text9
  1640  000E1E                     __ptext9:
  1641                           	callstack 0
  1642  000E1E                     _lcd_desenhaObstaculoB:
  1643                           	callstack 26
  1644  000E1E                     
  1645                           ;lcd.c: 143:     LE0 = 0;
  1646  000E1E  908D               	bcf	3981,0,c	;volatile
  1647  000E20                     
  1648                           ;lcd.c: 144:     lcd_write(0xCF);
  1649  000E20  0ECF               	movlw	207
  1650  000E22  ECDC  F006         	call	_lcd_write
  1651  000E26                     
  1652                           ;lcd.c: 146:     LE0 = 1;
  1653  000E26  808D               	bsf	3981,0,c	;volatile
  1654                           
  1655                           ;lcd.c: 147:     lcd_write(0x09);
  1656  000E28  0E09               	movlw	9
  1657  000E2A  ECDC  F006         	call	_lcd_write
  1658  000E2E  0012               	return		;funcret
  1659  000E30                     __end_of_lcd_desenhaObstaculoB:
  1660                           	callstack 0
  1661                           
  1662 ;; *************** function _lcd_desenhaObstaculoA *****************
  1663 ;; Defined at:
  1664 ;;		line 134 in file "lcd.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used: 1
  1684 ;; Hardware stack levels required when called: 4
  1685 ;; This function calls:
  1686 ;;		_lcd_write
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text10
  1693  000E30                     __ptext10:
  1694                           	callstack 0
  1695  000E30                     _lcd_desenhaObstaculoA:
  1696                           	callstack 26
  1697  000E30                     
  1698                           ;lcd.c: 135:     LE0 = 0;
  1699  000E30  908D               	bcf	3981,0,c	;volatile
  1700  000E32                     
  1701                           ;lcd.c: 136:     lcd_write(0x8F);
  1702  000E32  0E8F               	movlw	143
  1703  000E34  ECDC  F006         	call	_lcd_write
  1704  000E38                     
  1705                           ;lcd.c: 138:     LE0 = 1;
  1706  000E38  808D               	bsf	3981,0,c	;volatile
  1707                           
  1708                           ;lcd.c: 139:     lcd_write(0x09);
  1709  000E3A  0E09               	movlw	9
  1710  000E3C  ECDC  F006         	call	_lcd_write
  1711  000E40  0012               	return		;funcret
  1712  000E42                     __end_of_lcd_desenhaObstaculoA:
  1713                           	callstack 0
  1714                           
  1715 ;; *************** function _lcd_write *****************
  1716 ;; Defined at:
  1717 ;;		line 38 in file "lcd.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  c               1    wreg     unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  c               1    5[COMRAM] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0
  1732 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1733 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1734 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1735 ;;Total ram usage:        2 bytes
  1736 ;; Hardware stack levels used: 1
  1737 ;; Hardware stack levels required when called: 3
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_lcd_clear
  1742 ;;		_lcd_puts
  1743 ;;		_lcd_player
  1744 ;;		_lcd_desenhaObstaculoA
  1745 ;;		_lcd_desenhaObstaculoB
  1746 ;;		_lcd_movimentoObstaculo
  1747 ;;		_lcd_apaga
  1748 ;;		_lcd_init
  1749 ;;		_lcd_goto
  1750 ;;		_lcd_desenhaPlayer
  1751 ;;		_lcd_deslocaEsquerda
  1752 ;;		_lcd_movimentoPlayer
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text11
  1757  000DB8                     __ptext11:
  1758                           	callstack 0
  1759  000DB8                     _lcd_write:
  1760                           	callstack 25
  1761                           
  1762                           ;incstack = 0
  1763                           ;lcd_write@c stored from wreg
  1764  000DB8  6E06               	movwf	lcd_write@c^0,c
  1765  000DBA                     
  1766                           ;lcd.c: 38: lcd_write(unsigned char c);lcd.c: 39: {;lcd.c: 40:  _delay((unsigned long)((
      +                          1)*(20000000/4000.0)));
  1767  000DBA  0E07               	movlw	7
  1768  000DBC  6E05               	movwf	??_lcd_write^0,c
  1769  000DBE  0E7D               	movlw	125
  1770  000DC0                     u357:
  1771  000DC0  2EE8               	decfsz	wreg,f,c
  1772  000DC2  D7FE               	bra	u357
  1773  000DC4  2E05               	decfsz	??_lcd_write^0,f,c
  1774  000DC6  D7FC               	bra	u357
  1775  000DC8  F000               	nop	
  1776  000DCA                     
  1777                           ;lcd.c: 41:     PORTD = ( c );
  1778  000DCA  C006  FF83         	movff	lcd_write@c,3971	;volatile
  1779  000DCE                     
  1780                           ;lcd.c: 42:  ((LE1 = 1),(LE1=0));
  1781  000DCE  828D               	bsf	3981,1,c	;volatile
  1782  000DD0  928D               	bcf	3981,1,c	;volatile
  1783  000DD2  0012               	return		;funcret
  1784  000DD4                     __end_of_lcd_write:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _configura *****************
  1788 ;; Defined at:
  1789 ;;		line 74 in file "./config.h"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; Hardware stack levels required when called: 3
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text12
  1818  000D16                     __ptext12:
  1819                           	callstack 0
  1820  000D16                     _configura:
  1821                           	callstack 27
  1822  000D16  0EDF               	movlw	223
  1823  000D18  6E92               	movwf	146,c	;volatile
  1824  000D1A  0EFA               	movlw	250
  1825  000D1C  6E93               	movwf	147,c	;volatile
  1826  000D1E  6894               	setf	148,c	;volatile
  1827  000D20  0E00               	movlw	0
  1828  000D22  6E95               	movwf	149,c	;volatile
  1829  000D24  0E0C               	movlw	12
  1830  000D26  6E96               	movwf	150,c	;volatile
  1831  000D28  8ED0               	bsf	4048,7,c	;volatile
  1832  000D2A  0EC0               	movlw	192
  1833  000D2C  6EF2               	movwf	242,c	;volatile
  1834  000D2E  8A9D               	bsf	3997,5,c	;volatile
  1835  000D30  8A9F               	bsf	3999,5,c	;volatile
  1836  000D32  0E24               	movlw	36
  1837  000D34  6EAC               	movwf	172,c	;volatile
  1838  000D36  0E90               	movlw	144
  1839  000D38  6EAB               	movwf	171,c	;volatile
  1840  000D3A  0E00               	movlw	0
  1841  000D3C  6EB8               	movwf	184,c	;volatile
  1842  000D3E  0E81               	movlw	129
  1843  000D40  6EAF               	movwf	175,c	;volatile
  1844  000D42  0012               	return		;funcret
  1845  000D44                     __end_of_configura:
  1846                           	callstack 0
  1847                           
  1848 ;; *************** function _tmr *****************
  1849 ;; Defined at:
  1850 ;;		line 18 in file "main.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  serial          1    3[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0
  1865 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1867 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1868 ;;Total ram usage:        1 bytes
  1869 ;; Hardware stack levels used: 1
  1870 ;; Hardware stack levels required when called: 2
  1871 ;; This function calls:
  1872 ;;		_lcd_putch
  1873 ;; This function is called by:
  1874 ;;		Interrupt level 2
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	intcode
  1879  000008                     __pintcode:
  1880                           	callstack 0
  1881  000008                     _tmr:
  1882                           	callstack 24
  1883                           
  1884                           ;incstack = 0
  1885  000008  8231               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1886  00000A  EDCA  F006         	call	int_func,f	;refresh shadow registers
  1887                           
  1888                           	psect	intcode_body
  1889  000D94                     __pintcode_body:
  1890                           	callstack 24
  1891  000D94                     int_func:
  1892                           	callstack 24
  1893  000D94  0006               	pop		; remove dummy address from shadow register refresh
  1894  000D96                     
  1895                           ;main.c: 19:     if(RCIF){
  1896  000D96  AA9E               	btfss	3998,5,c	;volatile
  1897  000D98  EFD0  F006         	goto	i2u17_41
  1898  000D9C  EFD2  F006         	goto	i2u17_40
  1899  000DA0                     i2u17_41:
  1900  000DA0  EFDA  F006         	goto	i2l69
  1901  000DA4                     i2u17_40:
  1902  000DA4                     
  1903                           ;main.c: 21:         char serial = RCREG;
  1904  000DA4  CFAE F004          	movff	4014,tmr@serial	;volatile
  1905  000DA8                     
  1906                           ;main.c: 22:         lcd_putch(serial);
  1907  000DA8  5004               	movf	tmr@serial^0,w,c
  1908  000DAA  EC21  F007         	call	_lcd_putch
  1909  000DAE                     
  1910                           ;main.c: 24:         RCIF =0;
  1911  000DAE  9A9E               	bcf	3998,5,c	;volatile
  1912  000DB0                     
  1913                           ;main.c: 26:         TXREG = envia;
  1914  000DB0  C030  FFAD         	movff	_envia,4013	;volatile
  1915  000DB4                     i2l69:
  1916  000DB4  9231               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1917  000DB6  0011               	retfie		f
  1918  000DB8                     __end_of_tmr:
  1919                           	callstack 0
  1920                           
  1921 ;; *************** function _lcd_putch *****************
  1922 ;; Defined at:
  1923 ;;		line 72 in file "lcd.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  c               1    wreg     unsigned char 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  c               1    2[COMRAM] unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, status,2, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1937 ;;      Params:         0       0       0       0       0       0       0       0       0
  1938 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1940 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1941 ;;Total ram usage:        1 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 1
  1944 ;; This function calls:
  1945 ;;		i2_lcd_write
  1946 ;; This function is called by:
  1947 ;;		_tmr
  1948 ;;		_lcd_movimentoPlayer
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text14
  1953  000E42                     __ptext14:
  1954                           	callstack 0
  1955  000E42                     _lcd_putch:
  1956                           	callstack 24
  1957                           
  1958                           ;incstack = 0
  1959                           ;lcd_putch@c stored from wreg
  1960  000E42  6E03               	movwf	lcd_putch@c^0,c
  1961  000E44                     
  1962                           ;lcd.c: 72: lcd_putch(char c);lcd.c: 73: {;lcd.c: 74:  LE0 = 1;
  1963  000E44  808D               	bsf	3981,0,c	;volatile
  1964  000E46                     
  1965                           ;lcd.c: 75:  lcd_write( c );
  1966  000E46  5003               	movf	lcd_putch@c^0,w,c
  1967  000E48  ECEA  F006         	call	i2_lcd_write
  1968  000E4C  0012               	return		;funcret
  1969  000E4E                     __end_of_lcd_putch:
  1970                           	callstack 0
  1971                           
  1972 ;; *************** function i2_lcd_write *****************
  1973 ;; Defined at:
  1974 ;;		line 38 in file "lcd.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  c               1    wreg     unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  c               1    1[COMRAM] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1988 ;;      Params:         0       0       0       0       0       0       0       0       0
  1989 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1990 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1991 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        2 bytes
  1993 ;; Hardware stack levels used: 1
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_lcd_putch
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text15
  2002  000DD4                     __ptext15:
  2003                           	callstack 0
  2004  000DD4                     i2_lcd_write:
  2005                           	callstack 24
  2006                           
  2007                           ;incstack = 0
  2008                           ;i2lcd_write@c stored from wreg
  2009  000DD4  6E02               	movwf	i2lcd_write@c^0,c
  2010  000DD6                     
  2011                           ;lcd.c: 38: lcd_write(unsigned char c);lcd.c: 39: {;lcd.c: 40:  _delay((unsigned long)((
      +                          1)*(20000000/4000.0)));
  2012  000DD6  0E07               	movlw	7
  2013  000DD8  6E01               	movwf	??i2_lcd_write^0,c
  2014  000DDA  0E7D               	movlw	125
  2015  000DDC                     i2u36_47:
  2016  000DDC  2EE8               	decfsz	wreg,f,c
  2017  000DDE  D7FE               	bra	i2u36_47
  2018  000DE0  2E01               	decfsz	??i2_lcd_write^0,f,c
  2019  000DE2  D7FC               	bra	i2u36_47
  2020  000DE4  F000               	nop	
  2021  000DE6                     
  2022                           ;lcd.c: 41:     PORTD = ( c );
  2023  000DE6  C002  FF83         	movff	i2lcd_write@c,3971	;volatile
  2024  000DEA                     
  2025                           ;lcd.c: 42:  ((LE1 = 1),(LE1=0));
  2026  000DEA  828D               	bsf	3981,1,c	;volatile
  2027  000DEC  928D               	bcf	3981,1,c	;volatile
  2028  000DEE  0012               	return		;funcret
  2029  000DF0                     __end_ofi2_lcd_write:
  2030                           	callstack 0
  2031                           
  2032                           	psect	rparam
  2033  0000                     
  2034                           	psect	temp
  2035  000031                     btemp:
  2036                           	callstack 0
  2037  000031                     	ds	1
  2038  0000                     int$flags	set	btemp
  2039  0000                     wtemp8	set	btemp+1
  2040  0000                     ttemp5	set	btemp+1
  2041  0000                     ttemp6	set	btemp+4
  2042  0000                     ttemp7	set	btemp+8
  2043                           
  2044                           	psect	idloc
  2045                           
  2046                           ;Config register IDLOC0 @ 0x200000
  2047                           ;	unspecified, using default values
  2048  200000                     	org	2097152
  2049  200000  FF                 	db	255
  2050                           
  2051                           ;Config register IDLOC1 @ 0x200001
  2052                           ;	unspecified, using default values
  2053  200001                     	org	2097153
  2054  200001  FF                 	db	255
  2055                           
  2056                           ;Config register IDLOC2 @ 0x200002
  2057                           ;	unspecified, using default values
  2058  200002                     	org	2097154
  2059  200002  FF                 	db	255
  2060                           
  2061                           ;Config register IDLOC3 @ 0x200003
  2062                           ;	unspecified, using default values
  2063  200003                     	org	2097155
  2064  200003  FF                 	db	255
  2065                           
  2066                           ;Config register IDLOC4 @ 0x200004
  2067                           ;	unspecified, using default values
  2068  200004                     	org	2097156
  2069  200004  FF                 	db	255
  2070                           
  2071                           ;Config register IDLOC5 @ 0x200005
  2072                           ;	unspecified, using default values
  2073  200005                     	org	2097157
  2074  200005  FF                 	db	255
  2075                           
  2076                           ;Config register IDLOC6 @ 0x200006
  2077                           ;	unspecified, using default values
  2078  200006                     	org	2097158
  2079  200006  FF                 	db	255
  2080                           
  2081                           ;Config register IDLOC7 @ 0x200007
  2082                           ;	unspecified, using default values
  2083  200007                     	org	2097159
  2084  200007  FF                 	db	255
  2085                           
  2086                           	psect	config
  2087                           
  2088                           ;Config register CONFIG1L @ 0x300000
  2089                           ;	PLL Prescaler Selection bits
  2090                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
  2091                           ;	System Clock Postscaler Selection bits
  2092                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  2093                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2094                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  2095  300000                     	org	3145728
  2096  300000  04                 	db	4
  2097                           
  2098                           ;Config register CONFIG1H @ 0x300001
  2099                           ;	Oscillator Selection bits
  2100                           ;	FOSC = HS, HS oscillator (HS)
  2101                           ;	Fail-Safe Clock Monitor Enable bit
  2102                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2103                           ;	Internal/External Oscillator Switchover bit
  2104                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2105  300001                     	org	3145729
  2106  300001  0C                 	db	12
  2107                           
  2108                           ;Config register CONFIG2L @ 0x300002
  2109                           ;	Power-up Timer Enable bit
  2110                           ;	PWRT = ON, PWRT enabled
  2111                           ;	Brown-out Reset Enable bits
  2112                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  2113                           ;	Brown-out Reset Voltage bits
  2114                           ;	BORV = 3, Minimum setting 2.05V
  2115                           ;	USB Voltage Regulator Enable bit
  2116                           ;	VREGEN = OFF, USB voltage regulator disabled
  2117  300002                     	org	3145730
  2118  300002  18                 	db	24
  2119                           
  2120                           ;Config register CONFIG2H @ 0x300003
  2121                           ;	Watchdog Timer Enable bit
  2122                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2123                           ;	Watchdog Timer Postscale Select bits
  2124                           ;	WDTPS = 32768, 1:32768
  2125  300003                     	org	3145731
  2126  300003  1E                 	db	30
  2127                           
  2128                           ; Padding undefined space
  2129  300004                     	org	3145732
  2130  300004  FF                 	db	255
  2131                           
  2132                           ;Config register CONFIG3H @ 0x300005
  2133                           ;	CCP2 MUX bit
  2134                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  2135                           ;	PORTB A/D Enable bit
  2136                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2137                           ;	Low-Power Timer 1 Oscillator Enable bit
  2138                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2139                           ;	MCLR Pin Enable bit
  2140                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  2141  300005                     	org	3145733
  2142  300005  00                 	db	0
  2143                           
  2144                           ;Config register CONFIG4L @ 0x300006
  2145                           ;	Stack Full/Underflow Reset Enable bit
  2146                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2147                           ;	Single-Supply ICSP Enable bit
  2148                           ;	LVP = OFF, Single-Supply ICSP disabled
  2149                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2150                           ;	ICPRT = OFF, ICPORT disabled
  2151                           ;	Extended Instruction Set Enable bit
  2152                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2153                           ;	Background Debugger Enable bit
  2154                           ;	DEBUG = 0x1, unprogrammed default
  2155  300006                     	org	3145734
  2156  300006  81                 	db	129
  2157                           
  2158                           ; Padding undefined space
  2159  300007                     	org	3145735
  2160  300007  FF                 	db	255
  2161                           
  2162                           ;Config register CONFIG5L @ 0x300008
  2163                           ;	Code Protection bit
  2164                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2165                           ;	Code Protection bit
  2166                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2167                           ;	Code Protection bit
  2168                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2169                           ;	Code Protection bit
  2170                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2171  300008                     	org	3145736
  2172  300008  0F                 	db	15
  2173                           
  2174                           ;Config register CONFIG5H @ 0x300009
  2175                           ;	Boot Block Code Protection bit
  2176                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  2177                           ;	Data EEPROM Code Protection bit
  2178                           ;	CPD = OFF, Data EEPROM is not code-protected
  2179  300009                     	org	3145737
  2180  300009  C0                 	db	192
  2181                           
  2182                           ;Config register CONFIG6L @ 0x30000A
  2183                           ;	Write Protection bit
  2184                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  2185                           ;	Write Protection bit
  2186                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  2187                           ;	Write Protection bit
  2188                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  2189                           ;	Write Protection bit
  2190                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2191  30000A                     	org	3145738
  2192  30000A  0F                 	db	15
  2193                           
  2194                           ;Config register CONFIG6H @ 0x30000B
  2195                           ;	Configuration Register Write Protection bit
  2196                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2197                           ;	Boot Block Write Protection bit
  2198                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2199                           ;	Data EEPROM Write Protection bit
  2200                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2201  30000B                     	org	3145739
  2202  30000B  E0                 	db	224
  2203                           
  2204                           ;Config register CONFIG7L @ 0x30000C
  2205                           ;	Table Read Protection bit
  2206                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2207                           ;	Table Read Protection bit
  2208                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2209                           ;	Table Read Protection bit
  2210                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2211                           ;	Table Read Protection bit
  2212                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2213  30000C                     	org	3145740
  2214  30000C  0F                 	db	15
  2215                           
  2216                           ;Config register CONFIG7H @ 0x30000D
  2217                           ;	Boot Block Table Read Protection bit
  2218                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2219  30000D                     	org	3145741
  2220  30000D  40                 	db	64
  2221                           tosu	equ	0xFFF
  2222                           tosh	equ	0xFFE
  2223                           tosl	equ	0xFFD
  2224                           stkptr	equ	0xFFC
  2225                           pclatu	equ	0xFFB
  2226                           pclath	equ	0xFFA
  2227                           pcl	equ	0xFF9
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           prodh	equ	0xFF4
  2233                           prodl	equ	0xFF3
  2234                           indf0	equ	0xFEF
  2235                           postinc0	equ	0xFEE
  2236                           postdec0	equ	0xFED
  2237                           preinc0	equ	0xFEC
  2238                           plusw0	equ	0xFEB
  2239                           fsr0h	equ	0xFEA
  2240                           fsr0l	equ	0xFE9
  2241                           wreg	equ	0xFE8
  2242                           indf1	equ	0xFE7
  2243                           postinc1	equ	0xFE6
  2244                           postdec1	equ	0xFE5
  2245                           preinc1	equ	0xFE4
  2246                           plusw1	equ	0xFE3
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           bsr	equ	0xFE0
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           preinc2	equ	0xFDC
  2254                           plusw2	equ	0xFDB
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8

Data Sizes:
    Strings     2
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    movB@flag	PTR unsigned char  size(2) Largest target is 1
		 -> main@flagB5(COMRAM[1]), main@flagB4(COMRAM[1]), main@flagB3(COMRAM[1]), main@flagB2(COMRAM[1]), 
		 -> main@flagB1(COMRAM[1]), 

    movB@b	PTR unsigned char  size(2) Largest target is 1
		 -> main@b5(COMRAM[1]), main@b4(COMRAM[1]), main@b3(COMRAM[1]), main@b2(COMRAM[1]), 
		 -> main@b1(COMRAM[1]), 

    movB@q	PTR unsigned char  size(2) Largest target is 1
		 -> main@q5(COMRAM[1]), main@q4(COMRAM[1]), main@q3(COMRAM[1]), main@q2(COMRAM[1]), 
		 -> main@q1(COMRAM[1]), 

    movA@flag	PTR unsigned char  size(2) Largest target is 1
		 -> main@flagA4(COMRAM[1]), main@flagA3(COMRAM[1]), main@flagA2(COMRAM[1]), main@flagA1(COMRAM[1]), 

    movA@a	PTR unsigned char  size(2) Largest target is 1
		 -> main@a4(COMRAM[1]), main@a3(COMRAM[1]), main@a2(COMRAM[1]), main@a1(COMRAM[1]), 

    movA@p	PTR unsigned char  size(2) Largest target is 1
		 -> main@p4(COMRAM[1]), main@p3(COMRAM[1]), main@p2(COMRAM[1]), main@p1(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_movA
    _main->_movB
    _movB->_lcd_movimentoObstaculo
    _lcd_apaga->_lcd_puts
    _movA->_lcd_movimentoObstaculo
    _lcd_movimentoObstaculo->_lcd_puts
    _lcd_puts->_lcd_write
    _lcd_player->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _lcd_desenhaObstaculoB->_lcd_write
    _lcd_desenhaObstaculoA->_lcd_write

Critical Paths under _tmr in COMRAM

    _tmr->_lcd_putch
    _lcd_putch->i2_lcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _tmr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tmr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tmr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tmr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tmr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tmr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tmr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tmr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0    4268
                                             16 COMRAM    29    29      0
                          _configura
                          _lcd_clear
              _lcd_desenhaObstaculoA
              _lcd_desenhaObstaculoB
                           _lcd_init
                         _lcd_player
                               _movA
                               _movB
 ---------------------------------------------------------------------------------
 (1) _movB                                                 7     1      6    1837
                                              9 COMRAM     7     1      6
                          _lcd_apaga
             _lcd_movimentoObstaculo
 ---------------------------------------------------------------------------------
 (2) _lcd_apaga                                            0     0      0     227
                           _lcd_puts
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _movA                                                 7     1      6    1382
                                              9 COMRAM     7     1      6
             _lcd_movimentoObstaculo
 ---------------------------------------------------------------------------------
 (2) _lcd_movimentoObstaculo                               1     1      0     294
                                              8 COMRAM     1     1      0
                           _lcd_puts
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             2     0      2     212
                                              6 COMRAM     2     0      2
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_player                                           2     2      0      15
                                              6 COMRAM     2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      45
                                              7 COMRAM     1     1      0
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            1     1      0      15
                                              6 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_desenhaObstaculoB                                0     0      0      15
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_desenhaObstaculoA                                0     0      0      15
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _lcd_write                                            2     2      0      15
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _configura                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tmr                                                  1     1      0      67
                                              3 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (6) _lcd_putch                                            1     1      0      44
                                              2 COMRAM     1     1      0
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (7) i2_lcd_write                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configura
   _lcd_clear
     _lcd_write
   _lcd_desenhaObstaculoA
     _lcd_write
   _lcd_desenhaObstaculoB
     _lcd_write
   _lcd_init
     _lcd_clear
     _lcd_write
   _lcd_player
     _lcd_write
   _movA
     _lcd_movimentoObstaculo
       _lcd_puts
         _lcd_write
       _lcd_write
   _movB
     _lcd_apaga
       _lcd_puts
       _lcd_write
     _lcd_movimentoObstaculo

 _tmr (ROOT)
   _lcd_putch
     i2_lcd_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      30       1       51.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      20        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Mar 28 20:52:15 2021

                              _x 002E                               l74 0C7A  
                             l59 0D42                               l79 0C08  
                            l102 0AB6                              l116 0DD2  
                            l140 0E40                              l125 0D14  
                            l134 0B92                              l143 0E2E  
                            l119 0E06                              l160 0CDC  
                            l152 0E1C                              l149 0D6E  
                            l900 0D30                              l840 0DCE  
                            l842 0DD0                              l930 0C7C  
                            l836 0DBA                              l940 0C94  
                            l932 0C7E                              l838 0DCA  
                            l950 0CB2                              l942 0C96  
                            l934 0C80                              l880 0DF2  
                            l960 0CC6                              l952 0CB4  
                            l944 0CA6                              l936 0C8E  
                            l928 0C7C                              l882 0DF8  
                            l962 0CCC                              l954 0CB6  
                            l946 0CA8                              l938 0C92  
                            l970 0AF4                              _LE0 007C68  
                            _LE1 007C69                              l892 0D16  
                            l964 0CD2                              l956 0CC2  
                            l948 0CAA                              l980 0B4A  
                            l972 0AFA                              l894 0D1E  
                            l878 0DF0                              l966 0CD8  
                            l958 0CC4                              l990 0B64  
                            l982 0B4C                              l974 0B2C  
                            l896 0D28                              l992 0B6A  
                            l984 0B52                              l976 0B42  
                            l968 0AF2                              l898 0D2E  
                            l994 0B70                              l986 0B58  
                            l978 0B44                              l996 0B76  
                            l988 0B5E                              l998 0E30  
                            u200 09BE                              u201 09BA  
                            u210 09EA                              u211 09E6  
                            u140 0D14                              u220 0A16  
                            u141 0D10                              u221 0A12  
                            u150 0C3A                              u230 0A42  
                            u151 0C36                              u231 0A3E  
                            u160 0BC4                              u240 0A6E  
                            u161 0BC0                              u241 0A6A  
                            u250 0A9A                              u307 0C86  
                            u251 0A96                              u180 0966  
                            u317 0C9C                              u181 0962  
                            u190 0992                              u327 0CAC  
                            u191 098E                              u337 0CB8  
                            u347 0DFE                              u357 0DC0  
                            u277 0ADC                              u287 0B36  
                            u297 0B86                              _tmr 0008  
                            wreg 000FE8                             l1000 0E32  
                           l1002 0E38                             l1004 0E1E  
                           l1006 0E20                             l1008 0E26  
                           l1200 0C3A                             l1202 0C62  
                           l1210 0BC8                             l1212 0BD4  
                           l1204 0B94                             l1300 0A06  
                           l1150 0CDE                             l1214 0BE0  
                           l1206 0BAC                             l1310 0A6E  
                           l1302 0A16                             l1230 0808  
                           l1152 0CE4                             l1160 0D48  
                           l1208 0BC4                             l1216 0BF0  
                           l1312 0A8A                             l1304 0A32  
                           l1240 0834                             l1232 080C  
                           l1154 0CF4                             l1170 0D64  
                           l1162 0D4E                             l1314 0A9A  
                           l1306 0A42                             l1250 08A0  
                           l1242 0848                             l1234 0818  
                           l1156 0CF8                             l1172 0D66  
                           l1164 0D5A                             l1180 0E0A  
                           l1316 0AD2                             l1308 0A5E  
                           l1260 08C0                             l1252 08A8  
                           l1244 086C                             l1236 081A  
                           l1228 0804                             l1174 0D6C  
                           l1166 0D5C                             l1158 0D46  
                           l1182 0E10                             l1342 0910  
                           l1270 08DC                             l1262 08C4  
                           l1254 08AC                             l1246 0890  
                           l1238 0824                             l1168 0D62  
                           l1272 08E4                             l1264 08CC  
                           l1256 08B4                             l1248 089C  
                           l1178 0E08                             l1290 0992  
                           l1274 08E8                             l1266 08D0  
                           l1258 08B8                             l1282 08FC  
                           l1196 0C0A                             l1292 09AE  
                           l1276 08F0                             l1268 08D8  
                           l1284 0956                             l1198 0C22  
                           l1294 09BE                             l1286 0966  
                           l1278 08F4                             l1296 09DA  
                           l1288 0982                             l1298 09EA  
                           ?_tmr 0001                             STR_1 0801  
                           STR_2 0801                             _IPEN 007E87  
                           _RCIE 007CED                             _RCIF 007CF5  
                           _RCIP 007CFD                             i2l69 0DB4  
                           _main 0804                             _movA 0C0A  
                           _movB 0B94                             fsr2h 000FDA  
                           indf2 000FDF                             fsr2l 000FD9  
                           btemp 0031                             start 000E  
                   ___param_bank 000000                            ??_tmr 0004  
__size_of_lcd_movimentoObstaculo 002C                            ?_main 0001  
                          ?_movA 000A                            ?_movB 000A  
                    i2_lcd_write 0DD4                            i2l116 0DEE  
                          i2l128 0E4C                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _PORTD 000F83                            _PORTE 000F84  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TXREG 000FAD  
                          _TXSTA 000FAC                            _envia 0030  
                          movA@a 000C                            movB@b 000C  
                          movA@p 000A                            movB@q 000A  
                          tablat 000FF5          ??_lcd_desenhaObstaculoA 0007  
        ??_lcd_desenhaObstaculoB 0007                            ttemp5 0032  
                          ttemp6 0035                            ttemp7 0039  
                          status 000FD8                            wtemp8 0032  
                __initialization 0D70                     __end_of_main 0AF2  
                   __end_of_movA 0C7C                     __end_of_movB 0C0A  
                         ??_main 0011                           ??_movA 0010  
                         ??_movB 0010                    __activetblptr 000002  
         _lcd_movimentoObstaculo 0D44                           i2l1220 0DA4  
                         i2l1222 0DA8                           i2l1224 0DAE  
                         i2l1226 0DB0                           i2l1218 0D96  
                         i2l1190 0DEC                           i2l1184 0DD6  
                         i2l1192 0E44                           i2l1186 0DE6  
                         i2l1194 0E46                           i2l1188 0DEA  
                         _INTCON 000FF2                 __end_of_lcd_init 0CDE  
               __end_of_lcd_puts 0D16                           isa$std 000001  
                         main@a1 002D                           main@a2 001D  
                         main@b1 0020                           main@a3 001E  
                         main@b2 0021                           main@a4 001F  
                         main@b3 0022                           main@b4 0023  
                         main@b5 0024                           main@p1 0014  
                         main@p2 0015                           main@q1 0018  
                         main@p3 0016                           main@q2 0019  
                         main@p4 0017                           main@q3 001A  
                         main@q4 001B                           main@q5 001C  
                   __pdataCOMRAM 0030                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                       __accesstop 0060  
        __end_of__initialization 0D86                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001               __size_of_lcd_apaga 0016  
             __size_of_lcd_clear 0018               __size_of_configura 002E  
             __size_of_lcd_putch 000C               __size_of_lcd_write 001C  
                   i2lcd_write@c 0002                          _BAUDCON 000FB8  
                   ?i2_lcd_write 0001                          i2u17_40 0DA4  
                        i2u17_41 0DA0                          i2u36_47 0DDC  
                     _lcd_player 0AF2                        ?_lcd_init 0001  
                      ?_lcd_puts 0007   __size_of_lcd_desenhaObstaculoA 0012  
 __size_of_lcd_desenhaObstaculoB 0012    __end_of_lcd_desenhaObstaculoA 0E42  
  __end_of_lcd_desenhaObstaculoB 0E30                          __Hparam 0000  
                        __Lparam 0000                __end_of_lcd_apaga 0E1E  
              __end_of_lcd_clear 0E08                __end_of_configura 0D44  
              __end_of_lcd_putch 0E4E                __end_of_lcd_write 0DD4  
                   __psmallconst 0800                          __pcinit 0D70  
                        __ramtop 0800                          __ptext0 0804  
                        __ptext1 0B94                          __ptext2 0E08  
                        __ptext3 0C0A                          __ptext4 0D44  
                        __ptext5 0CDE                          __ptext6 0AF2  
                        __ptext7 0C7C                          __ptext8 0DF0  
                        __ptext9 0E1E                     __size_of_tmr 0DB0  
        ?_lcd_movimentoObstaculo 0001                       ??_lcd_init 0008  
                 __pintcode_body 0D94                       ??_lcd_puts 0009  
           end_of_initialization 0D86                    __Lmediumconst 0000  
                        int_func 0D94                        _PORTBbits 000F81  
 __end_of_lcd_movimentoObstaculo 0D70                      ?_lcd_player 0001  
                     main@flagA1 0013                       main@flagA2 0025  
                     main@flagB1 0028                       main@flagA3 0026  
                     main@flagB2 0029                       main@flagA4 0027  
                     main@flagB3 002A                       main@flagB4 002B  
                     main@flagB5 002C                       lcd_putch@c 0003  
                     lcd_write@c 0006                    __pidataCOMRAM 0E4E  
            start_initialization 0D70             __size_ofi2_lcd_write 001C  
                    __end_of_tmr 0DB8              __size_of_lcd_player 00A2  
                    __pbssCOMRAM 002E                __size_of_lcd_init 0062  
              __size_of_lcd_puts 0038                        __pintcode 0008  
                      _lcd_apaga 0E08                        _lcd_clear 0DF0  
                      _configura 0D16                        _lcd_putch 0E42  
                      _lcd_write 0DB8                      __smallconst 0800  
      lcd_movimentoObstaculo@pos 0009            _lcd_desenhaObstaculoA 0E30  
          _lcd_desenhaObstaculoB 0E1E                       ?_lcd_apaga 0001  
                     ?_lcd_clear 0001                       ?_configura 0001  
                     ?_lcd_putch 0001                       ?_lcd_write 0001  
                      lcd_puts@s 0007                     ??_lcd_player 0007  
                       __Hrparam 0000                         __Lrparam 0000  
             __end_of_lcd_player 0B94                         __ptext10 0E30  
                       __ptext11 0DB8                         __ptext12 0D16  
                       __ptext14 0E42                         __ptext15 0DD4  
                       _lcd_init 0C7C                         _lcd_puts 0CDE  
                  __size_of_main 02EE                    __size_of_movA 0072  
                  __size_of_movB 0076           ?_lcd_desenhaObstaculoA 0001  
         ?_lcd_desenhaObstaculoB 0001                        tmr@serial 0004  
                       isa$xinst 000000                         int$flags 0031  
                    ??_lcd_apaga 0009                      ??_lcd_clear 0007  
                    ??_configura 0005                      ??_lcd_putch 0003  
                  ??i2_lcd_write 0001                      ??_lcd_write 0005  
                       movA@flag 000E                         movB@flag 000E  
                       intlevel2 0000         ??_lcd_movimentoObstaculo 0009  
            __end_ofi2_lcd_write 0DF0  
