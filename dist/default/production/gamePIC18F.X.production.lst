

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Mar 18 02:35:52 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  000CC6                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for _envia
    70  000CC6  48                 	db	72
    71  0000                     _PORTBbits	set	3969
    72  0000                     _PORTE	set	3972
    73  0000                     _PORTD	set	3971
    74  0000                     _TXREG	set	4013
    75  0000                     _RCREG	set	4014
    76  0000                     _SPBRG	set	4015
    77  0000                     _BAUDCON	set	4024
    78  0000                     _RCSTA	set	4011
    79  0000                     _TXSTA	set	4012
    80  0000                     _INTCON	set	4082
    81  0000                     _TRISE	set	3990
    82  0000                     _TRISD	set	3989
    83  0000                     _TRISC	set	3988
    84  0000                     _TRISB	set	3987
    85  0000                     _TRISA	set	3986
    86  0000                     _LE0	set	31848
    87  0000                     _LE1	set	31849
    88  0000                     _RCIF	set	31989
    89  0000                     _RCIP	set	31997
    90  0000                     _RCIE	set	31981
    91  0000                     _IPEN	set	32391
    92                           
    93                           	psect	smallconst
    94  000800                     __psmallconst:
    95                           	callstack 0
    96  000800  00                 	db	0
    97  000801                     STR_1:
    98  000801  20                 	db	32
    99  000802  00                 	db	0
   100  000803  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           ; #config settings
   103                           
   104                           	psect	cinit
   105  000C10                     __pcinit:
   106                           	callstack 0
   107  000C10                     start_initialization:
   108                           	callstack 0
   109  000C10                     __initialization:
   110                           	callstack 0
   111                           
   112                           ; Initialize objects allocated to COMRAM (1 bytes)
   113                           ; load TBLPTR registers with __pidataCOMRAM
   114  000C10  0EC6               	movlw	low __pidataCOMRAM
   115  000C12  6EF6               	movwf	tblptrl,c
   116  000C14  0E0C               	movlw	high __pidataCOMRAM
   117  000C16  6EF7               	movwf	tblptrh,c
   118  000C18  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   119  000C1A  6EF8               	movwf	tblptru,c
   120  000C1C  0009               	tblrd		*+	;fetch initializer
   121  000C1E  CFF5 F018          	movff	tablat,__pdataCOMRAM
   122                           
   123                           ; Clear objects allocated to COMRAM (2 bytes)
   124  000C22  6A17               	clrf	(__pbssCOMRAM+1)& (0+255),c
   125  000C24  6A16               	clrf	__pbssCOMRAM& (0+255),c
   126  000C26                     end_of_initialization:
   127                           	callstack 0
   128  000C26                     __end_of__initialization:
   129                           	callstack 0
   130  000C26  9019               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   131  000C28  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   132  000C2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   133  000C2C  6EF8               	movwf	tblptru,c
   134  000C2E  0100               	movlb	0
   135  000C30  EF02  F004         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138  000016                     __pbssCOMRAM:
   139                           	callstack 0
   140  000016                     _x:
   141                           	callstack 0
   142  000016                     	ds	2
   143                           
   144                           	psect	dataCOMRAM
   145  000018                     __pdataCOMRAM:
   146                           	callstack 0
   147  000018                     _envia:
   148                           	callstack 0
   149  000018                     	ds	1
   150                           
   151                           	psect	cstackCOMRAM
   152  000001                     __pcstackCOMRAM:
   153                           	callstack 0
   154  000001                     ??i2_lcd_write:
   155                           
   156                           ; 1 bytes @ 0x0
   157  000001                     	ds	1
   158  000002                     i2lcd_write@c:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0x1
   162  000002                     	ds	1
   163  000003                     lcd_putch@c:
   164                           	callstack 0
   165                           
   166                           ; 1 bytes @ 0x2
   167  000003                     	ds	1
   168  000004                     tmr@serial:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x3
   172  000004                     	ds	1
   173  000005                     ??_lcd_write:
   174                           
   175                           ; 1 bytes @ 0x4
   176  000005                     	ds	1
   177  000006                     lcd_write@c:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0x5
   181  000006                     	ds	1
   182  000007                     ??_lcd_clear:
   183  000007                     ??_lcd_player:
   184  000007                     lcd_puts@s:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x6
   188  000007                     	ds	1
   189  000008                     ??_lcd_init:
   190                           
   191                           ; 1 bytes @ 0x7
   192  000008                     	ds	1
   193  000009                     lcd_movimentoObstaculo@pos:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x8
   197  000009                     	ds	1
   198  00000A                     ??_main:
   199                           
   200                           ; 1 bytes @ 0x9
   201  00000A                     	ds	2
   202  00000C                     main@x:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0xB
   206  00000C                     	ds	2
   207  00000E                     main@flagA:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0xD
   211  00000E                     	ds	2
   212  000010                     main@posA6:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0xF
   216  000010                     	ds	1
   217  000011                     main@posA5:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x10
   221  000011                     	ds	1
   222  000012                     main@posA4:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0x11
   226  000012                     	ds	1
   227  000013                     main@posA3:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0x12
   231  000013                     	ds	1
   232  000014                     main@posA1:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0x13
   236  000014                     	ds	1
   237  000015                     main@posA2:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x14
   241  000015                     	ds	1
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 30 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;  flagA           2   13[COMRAM] int 
   253 ;;  x               2   11[COMRAM] int 
   254 ;;  pos2            2    0        int 
   255 ;;  posA2           1   20[COMRAM] unsigned char 
   256 ;;  posA1           1   19[COMRAM] unsigned char 
   257 ;;  posA3           1   18[COMRAM] unsigned char 
   258 ;;  posA4           1   17[COMRAM] unsigned char 
   259 ;;  posA5           1   16[COMRAM] unsigned char 
   260 ;;  posA6           1   15[COMRAM] unsigned char 
   261 ;;  pos             1    0        unsigned char 
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    wreg      void 
   264 ;; Registers used:
   265 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   266 ;; Tracked objects:
   267 ;;		On entry : 0/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   271 ;;      Params:         0       0       0       0       0       0       0       0       0
   272 ;;      Locals:        10       0       0       0       0       0       0       0       0
   273 ;;      Temps:          2       0       0       0       0       0       0       0       0
   274 ;;      Totals:        12       0       0       0       0       0       0       0       0
   275 ;;Total ram usage:       12 bytes
   276 ;; Hardware stack levels required when called: 6
   277 ;; This function calls:
   278 ;;		_configura
   279 ;;		_lcd_clear
   280 ;;		_lcd_desenhaObstaculo
   281 ;;		_lcd_init
   282 ;;		_lcd_movimentoObstaculo
   283 ;;		_lcd_player
   284 ;; This function is called by:
   285 ;;		Startup code after reset
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289                           	psect	text0
   290  000804                     __ptext0:
   291                           	callstack 0
   292  000804                     _main:
   293                           	callstack 25
   294  000804                     
   295                           ;main.c: 31:     configura();
   296  000804  ECF1  F005         	call	_configura	;wreg free
   297  000808                     
   298                           ;main.c: 32:     PORTD = 0;
   299  000808  0E00               	movlw	0
   300  00080A  6E83               	movwf	131,c	;volatile
   301  00080C                     
   302                           ;main.c: 33:     PORTE = 0;
   303  00080C  0E00               	movlw	0
   304  00080E  6E84               	movwf	132,c	;volatile
   305                           
   306                           ;main.c: 35:     lcd_init();
   307  000810  EC79  F005         	call	_lcd_init	;wreg free
   308                           
   309                           ;main.c: 36:     lcd_clear();
   310  000814  EC48  F006         	call	_lcd_clear	;wreg free
   311  000818                     
   312                           ;main.c: 37:     PORTBbits.RB0 = 0;
   313  000818  9081               	bcf	129,0,c	;volatile
   314  00081A                     
   315                           ;main.c: 38:     PORTBbits.RB2 = 0;
   316  00081A  9481               	bcf	129,2,c	;volatile
   317                           
   318                           ;main.c: 42:     lcd_player();
   319  00081C  EC28  F005         	call	_lcd_player	;wreg free
   320                           
   321                           ;main.c: 44:     lcd_desenhaObstaculo();
   322  000820  EC54  F006         	call	_lcd_desenhaObstaculo	;wreg free
   323  000824                     
   324                           ;main.c: 46:     char posA1, posA2, posA3, posA4, posA5, posA6;;main.c: 48:     posA1 = 
      +                          posA2 = posA3 = posA4 = posA5= posA6 = 0x8F;
   325  000824  0E8F               	movlw	143
   326  000826  6E10               	movwf	main@posA6^0,c
   327  000828  C010  F011         	movff	main@posA6,main@posA5
   328  00082C  C011  F012         	movff	main@posA5,main@posA4
   329  000830  C012  F013         	movff	main@posA4,main@posA3
   330  000834  C013  F015         	movff	main@posA3,main@posA2
   331  000838  C015  F014         	movff	main@posA2,main@posA1
   332  00083C                     
   333                           ;main.c: 52:     x = flagA = 0;
   334  00083C  0E00               	movlw	0
   335  00083E  6E0F               	movwf	(main@flagA+1)^0,c
   336  000840  0E00               	movlw	0
   337  000842  6E0E               	movwf	main@flagA^0,c
   338  000844  C00E  F00C         	movff	main@flagA,main@x
   339  000848  C00F  F00D         	movff	main@flagA+1,main@x+1
   340  00084C                     l1172:
   341                           
   342                           ;main.c: 63:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   343  00084C  0E1A               	movlw	26
   344  00084E  6E0B               	movwf	(??_main+1)^0,c
   345  000850  0E5E               	movlw	94
   346  000852  6E0A               	movwf	??_main^0,c
   347  000854  0E6E               	movlw	110
   348  000856                     u97:
   349  000856  2EE8               	decfsz	wreg,f,c
   350  000858  D7FE               	bra	u97
   351  00085A  2E0A               	decfsz	??_main^0,f,c
   352  00085C  D7FC               	bra	u97
   353  00085E  2E0B               	decfsz	(??_main+1)^0,f,c
   354  000860  D7FA               	bra	u97
   355  000862  D000               	nop2	
   356  000864                     
   357                           ;main.c: 65:         posA1 = lcd_movimentoObstaculo(posA1);
   358  000864  5014               	movf	main@posA1^0,w,c
   359  000866  ECAA  F005         	call	_lcd_movimentoObstaculo
   360  00086A  6E14               	movwf	main@posA1^0,c
   361                           
   362                           ;main.c: 67:         switch(x) {
   363  00086C  EF76  F004         	goto	l1200
   364  000870                     l1176:
   365                           
   366                           ;main.c: 69:                 posA2 = lcd_movimentoObstaculo(posA2);
   367  000870  5015               	movf	main@posA2^0,w,c
   368  000872  ECAA  F005         	call	_lcd_movimentoObstaculo
   369  000876  6E15               	movwf	main@posA2^0,c
   370  000878                     
   371                           ;main.c: 70:                 flagA = 1;
   372  000878  0E00               	movlw	0
   373  00087A  6E0F               	movwf	(main@flagA+1)^0,c
   374  00087C  0E01               	movlw	1
   375  00087E  6E0E               	movwf	main@flagA^0,c
   376                           
   377                           ;main.c: 71:                 break;
   378  000880  EFFC  F004         	goto	l1216
   379  000884                     l1180:
   380                           
   381                           ;main.c: 73:                 posA3 = lcd_movimentoObstaculo(posA3);
   382  000884  5013               	movf	main@posA3^0,w,c
   383  000886  ECAA  F005         	call	_lcd_movimentoObstaculo
   384  00088A  6E13               	movwf	main@posA3^0,c
   385  00088C                     
   386                           ;main.c: 74:                 flagA = 2;
   387  00088C  0E00               	movlw	0
   388  00088E  6E0F               	movwf	(main@flagA+1)^0,c
   389  000890  0E02               	movlw	2
   390  000892  6E0E               	movwf	main@flagA^0,c
   391                           
   392                           ;main.c: 75:                 break;
   393  000894  EFFC  F004         	goto	l1216
   394  000898                     l1184:
   395                           
   396                           ;main.c: 77:                 posA4 = lcd_movimentoObstaculo(posA4);
   397  000898  5012               	movf	main@posA4^0,w,c
   398  00089A  ECAA  F005         	call	_lcd_movimentoObstaculo
   399  00089E  6E12               	movwf	main@posA4^0,c
   400  0008A0                     
   401                           ;main.c: 78:                 flagA = 3;
   402  0008A0  0E00               	movlw	0
   403  0008A2  6E0F               	movwf	(main@flagA+1)^0,c
   404  0008A4  0E03               	movlw	3
   405  0008A6  6E0E               	movwf	main@flagA^0,c
   406                           
   407                           ;main.c: 79:                 break;
   408  0008A8  EFFC  F004         	goto	l1216
   409  0008AC                     l1188:
   410                           
   411                           ;main.c: 81:                 posA5 = lcd_movimentoObstaculo(posA5);
   412  0008AC  5011               	movf	main@posA5^0,w,c
   413  0008AE  ECAA  F005         	call	_lcd_movimentoObstaculo
   414  0008B2  6E11               	movwf	main@posA5^0,c
   415  0008B4                     
   416                           ;main.c: 82:                 flagA = 4;
   417  0008B4  0E00               	movlw	0
   418  0008B6  6E0F               	movwf	(main@flagA+1)^0,c
   419  0008B8  0E04               	movlw	4
   420  0008BA  6E0E               	movwf	main@flagA^0,c
   421                           
   422                           ;main.c: 83:                 break;
   423  0008BC  EFFC  F004         	goto	l1216
   424  0008C0                     l1192:
   425                           
   426                           ;main.c: 85:                 posA6 = lcd_movimentoObstaculo(posA6);
   427  0008C0  5010               	movf	main@posA6^0,w,c
   428  0008C2  ECAA  F005         	call	_lcd_movimentoObstaculo
   429  0008C6  6E10               	movwf	main@posA6^0,c
   430  0008C8                     
   431                           ;main.c: 86:                 flagA = 5;
   432  0008C8  0E00               	movlw	0
   433  0008CA  6E0F               	movwf	(main@flagA+1)^0,c
   434  0008CC  0E05               	movlw	5
   435  0008CE  6E0E               	movwf	main@flagA^0,c
   436                           
   437                           ;main.c: 87:                 break;
   438  0008D0  EFFC  F004         	goto	l1216
   439  0008D4                     l1196:
   440                           
   441                           ;main.c: 89:                 flagA = 6;
   442  0008D4  0E00               	movlw	0
   443  0008D6  6E0F               	movwf	(main@flagA+1)^0,c
   444  0008D8  0E06               	movlw	6
   445  0008DA  6E0E               	movwf	main@flagA^0,c
   446                           
   447                           ;main.c: 90:                 posA1 = 0xBF;
   448  0008DC  0EBF               	movlw	191
   449  0008DE  6E14               	movwf	main@posA1^0,c
   450                           
   451                           ;main.c: 91:                 x = 0;
   452  0008E0  0E00               	movlw	0
   453  0008E2  6E0D               	movwf	(main@x+1)^0,c
   454  0008E4  0E00               	movlw	0
   455  0008E6  6E0C               	movwf	main@x^0,c
   456                           
   457                           ;main.c: 92:                 break;
   458  0008E8  EFFC  F004         	goto	l1216
   459  0008EC                     l1200:
   460  0008EC  C00C  F00A         	movff	main@x,??_main
   461  0008F0  C00D  F00B         	movff	main@x+1,??_main+1
   462                           
   463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   464                           ; Switch size 1, requested type "simple"
   465                           ; Number of cases is 1, Range of values is 0 to 0
   466                           ; switch strategies available:
   467                           ; Name         Instructions Cycles
   468                           ; simple_byte            4     3 (average)
   469                           ;	Chosen strategy is simple_byte
   470  0008F4  500B               	movf	(??_main+1)^0,w,c
   471  0008F6  0A00               	xorlw	0	; case 0
   472  0008F8  B4D8               	btfsc	status,2,c
   473  0008FA  EF81  F004         	goto	l1252
   474  0008FE  EFFC  F004         	goto	l1216
   475  000902                     l1252:
   476                           
   477                           ; Switch size 1, requested type "simple"
   478                           ; Number of cases is 6, Range of values is 4 to 23
   479                           ; switch strategies available:
   480                           ; Name         Instructions Cycles
   481                           ; simple_byte           19    10 (average)
   482                           ;	Chosen strategy is simple_byte
   483  000902  500A               	movf	??_main^0,w,c
   484  000904  0A04               	xorlw	4	; case 4
   485  000906  B4D8               	btfsc	status,2,c
   486  000908  EF38  F004         	goto	l1176
   487  00090C  0A0E               	xorlw	14	; case 10
   488  00090E  B4D8               	btfsc	status,2,c
   489  000910  EF42  F004         	goto	l1180
   490  000914  0A06               	xorlw	6	; case 12
   491  000916  B4D8               	btfsc	status,2,c
   492  000918  EF4C  F004         	goto	l1184
   493  00091C  0A1C               	xorlw	28	; case 16
   494  00091E  B4D8               	btfsc	status,2,c
   495  000920  EF56  F004         	goto	l1188
   496  000924  0A03               	xorlw	3	; case 19
   497  000926  B4D8               	btfsc	status,2,c
   498  000928  EF60  F004         	goto	l1192
   499  00092C  0A04               	xorlw	4	; case 23
   500  00092E  B4D8               	btfsc	status,2,c
   501  000930  EF6A  F004         	goto	l1196
   502  000934  EFFC  F004         	goto	l1216
   503  000938                     l1202:
   504                           
   505                           ;main.c: 97:                 posA2 = lcd_movimentoObstaculo(posA2);
   506  000938  5015               	movf	main@posA2^0,w,c
   507  00093A  ECAA  F005         	call	_lcd_movimentoObstaculo
   508  00093E  6E15               	movwf	main@posA2^0,c
   509                           
   510                           ;main.c: 98:                 break;
   511  000940  EF22  F005         	goto	l1218
   512  000944                     l1204:
   513                           
   514                           ;main.c: 100:                 posA1 = lcd_movimentoObstaculo(posA1);
   515  000944  5014               	movf	main@posA1^0,w,c
   516  000946  ECAA  F005         	call	_lcd_movimentoObstaculo
   517  00094A  6E14               	movwf	main@posA1^0,c
   518                           
   519                           ;main.c: 101:                 posA2 = lcd_movimentoObstaculo(posA2);
   520  00094C  5015               	movf	main@posA2^0,w,c
   521  00094E  ECAA  F005         	call	_lcd_movimentoObstaculo
   522  000952  6E15               	movwf	main@posA2^0,c
   523                           
   524                           ;main.c: 102:                 break;
   525  000954  EF22  F005         	goto	l1218
   526  000958                     l1206:
   527                           
   528                           ;main.c: 104:                 posA1 = lcd_movimentoObstaculo(posA1);
   529  000958  5014               	movf	main@posA1^0,w,c
   530  00095A  ECAA  F005         	call	_lcd_movimentoObstaculo
   531  00095E  6E14               	movwf	main@posA1^0,c
   532                           
   533                           ;main.c: 105:                 posA2 = lcd_movimentoObstaculo(posA2);
   534  000960  5015               	movf	main@posA2^0,w,c
   535  000962  ECAA  F005         	call	_lcd_movimentoObstaculo
   536  000966  6E15               	movwf	main@posA2^0,c
   537                           
   538                           ;main.c: 106:                 posA3 = lcd_movimentoObstaculo(posA3);
   539  000968  5013               	movf	main@posA3^0,w,c
   540  00096A  ECAA  F005         	call	_lcd_movimentoObstaculo
   541  00096E  6E13               	movwf	main@posA3^0,c
   542                           
   543                           ;main.c: 107:                 break;
   544  000970  EF22  F005         	goto	l1218
   545  000974                     l1208:
   546                           
   547                           ;main.c: 109:                 posA1 = lcd_movimentoObstaculo(posA1);
   548  000974  5014               	movf	main@posA1^0,w,c
   549  000976  ECAA  F005         	call	_lcd_movimentoObstaculo
   550  00097A  6E14               	movwf	main@posA1^0,c
   551                           
   552                           ;main.c: 110:                 posA2 = lcd_movimentoObstaculo(posA2);
   553  00097C  5015               	movf	main@posA2^0,w,c
   554  00097E  ECAA  F005         	call	_lcd_movimentoObstaculo
   555  000982  6E15               	movwf	main@posA2^0,c
   556                           
   557                           ;main.c: 111:                 posA3 = lcd_movimentoObstaculo(posA3);
   558  000984  5013               	movf	main@posA3^0,w,c
   559  000986  ECAA  F005         	call	_lcd_movimentoObstaculo
   560  00098A  6E13               	movwf	main@posA3^0,c
   561                           
   562                           ;main.c: 112:                 posA4 = lcd_movimentoObstaculo(posA4);
   563  00098C  5012               	movf	main@posA4^0,w,c
   564  00098E  ECAA  F005         	call	_lcd_movimentoObstaculo
   565  000992  6E12               	movwf	main@posA4^0,c
   566                           
   567                           ;main.c: 113:                 break;
   568  000994  EF22  F005         	goto	l1218
   569  000998                     l1210:
   570                           
   571                           ;main.c: 115:                 posA1 = lcd_movimentoObstaculo(posA1);
   572  000998  5014               	movf	main@posA1^0,w,c
   573  00099A  ECAA  F005         	call	_lcd_movimentoObstaculo
   574  00099E  6E14               	movwf	main@posA1^0,c
   575                           
   576                           ;main.c: 116:                 posA2 = lcd_movimentoObstaculo(posA2);
   577  0009A0  5015               	movf	main@posA2^0,w,c
   578  0009A2  ECAA  F005         	call	_lcd_movimentoObstaculo
   579  0009A6  6E15               	movwf	main@posA2^0,c
   580                           
   581                           ;main.c: 117:                 posA3 = lcd_movimentoObstaculo(posA3);
   582  0009A8  5013               	movf	main@posA3^0,w,c
   583  0009AA  ECAA  F005         	call	_lcd_movimentoObstaculo
   584  0009AE  6E13               	movwf	main@posA3^0,c
   585                           
   586                           ;main.c: 118:                 posA4 = lcd_movimentoObstaculo(posA4);
   587  0009B0  5012               	movf	main@posA4^0,w,c
   588  0009B2  ECAA  F005         	call	_lcd_movimentoObstaculo
   589  0009B6  6E12               	movwf	main@posA4^0,c
   590                           
   591                           ;main.c: 119:                 posA5 = lcd_movimentoObstaculo(posA5);
   592  0009B8  5011               	movf	main@posA5^0,w,c
   593  0009BA  ECAA  F005         	call	_lcd_movimentoObstaculo
   594  0009BE  6E11               	movwf	main@posA5^0,c
   595                           
   596                           ;main.c: 120:                 break;
   597  0009C0  EF22  F005         	goto	l1218
   598  0009C4                     l1212:
   599                           
   600                           ;main.c: 122:                 posA1 = lcd_movimentoObstaculo(posA1);
   601  0009C4  5014               	movf	main@posA1^0,w,c
   602  0009C6  ECAA  F005         	call	_lcd_movimentoObstaculo
   603  0009CA  6E14               	movwf	main@posA1^0,c
   604                           
   605                           ;main.c: 123:                 posA2 = lcd_movimentoObstaculo(posA2);
   606  0009CC  5015               	movf	main@posA2^0,w,c
   607  0009CE  ECAA  F005         	call	_lcd_movimentoObstaculo
   608  0009D2  6E15               	movwf	main@posA2^0,c
   609                           
   610                           ;main.c: 124:                 posA3 = lcd_movimentoObstaculo(posA3);
   611  0009D4  5013               	movf	main@posA3^0,w,c
   612  0009D6  ECAA  F005         	call	_lcd_movimentoObstaculo
   613  0009DA  6E13               	movwf	main@posA3^0,c
   614                           
   615                           ;main.c: 125:                 posA4 = lcd_movimentoObstaculo(posA4);
   616  0009DC  5012               	movf	main@posA4^0,w,c
   617  0009DE  ECAA  F005         	call	_lcd_movimentoObstaculo
   618  0009E2  6E12               	movwf	main@posA4^0,c
   619                           
   620                           ;main.c: 126:                 posA5 = lcd_movimentoObstaculo(posA5);
   621  0009E4  5011               	movf	main@posA5^0,w,c
   622  0009E6  ECAA  F005         	call	_lcd_movimentoObstaculo
   623  0009EA  6E11               	movwf	main@posA5^0,c
   624                           
   625                           ;main.c: 127:                 posA6 = lcd_movimentoObstaculo(posA6);
   626  0009EC  5010               	movf	main@posA6^0,w,c
   627  0009EE  ECAA  F005         	call	_lcd_movimentoObstaculo
   628  0009F2  6E10               	movwf	main@posA6^0,c
   629                           
   630                           ;main.c: 128:                 break;
   631  0009F4  EF22  F005         	goto	l1218
   632  0009F8                     l1216:
   633  0009F8  C00E  F00A         	movff	main@flagA,??_main
   634  0009FC  C00F  F00B         	movff	main@flagA+1,??_main+1
   635                           
   636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   637                           ; Switch size 1, requested type "simple"
   638                           ; Number of cases is 1, Range of values is 0 to 0
   639                           ; switch strategies available:
   640                           ; Name         Instructions Cycles
   641                           ; simple_byte            4     3 (average)
   642                           ;	Chosen strategy is simple_byte
   643  000A00  500B               	movf	(??_main+1)^0,w,c
   644  000A02  0A00               	xorlw	0	; case 0
   645  000A04  B4D8               	btfsc	status,2,c
   646  000A06  EF07  F005         	goto	l1254
   647  000A0A  EF22  F005         	goto	l1218
   648  000A0E                     l1254:
   649                           
   650                           ; Switch size 1, requested type "simple"
   651                           ; Number of cases is 6, Range of values is 1 to 6
   652                           ; switch strategies available:
   653                           ; Name         Instructions Cycles
   654                           ; simple_byte           19    10 (average)
   655                           ;	Chosen strategy is simple_byte
   656  000A0E  500A               	movf	??_main^0,w,c
   657  000A10  0A01               	xorlw	1	; case 1
   658  000A12  B4D8               	btfsc	status,2,c
   659  000A14  EF9C  F004         	goto	l1202
   660  000A18  0A03               	xorlw	3	; case 2
   661  000A1A  B4D8               	btfsc	status,2,c
   662  000A1C  EFA2  F004         	goto	l1204
   663  000A20  0A01               	xorlw	1	; case 3
   664  000A22  B4D8               	btfsc	status,2,c
   665  000A24  EFAC  F004         	goto	l1206
   666  000A28  0A07               	xorlw	7	; case 4
   667  000A2A  B4D8               	btfsc	status,2,c
   668  000A2C  EFBA  F004         	goto	l1208
   669  000A30  0A01               	xorlw	1	; case 5
   670  000A32  B4D8               	btfsc	status,2,c
   671  000A34  EFCC  F004         	goto	l1210
   672  000A38  0A03               	xorlw	3	; case 6
   673  000A3A  B4D8               	btfsc	status,2,c
   674  000A3C  EFE2  F004         	goto	l1212
   675  000A40  EF22  F005         	goto	l1218
   676  000A44                     l1218:
   677                           
   678                           ;main.c: 132:         x++;
   679  000A44  4A0C               	infsnz	main@x^0,f,c
   680  000A46  2A0D               	incf	(main@x+1)^0,f,c
   681  000A48  EF26  F004         	goto	l1172
   682  000A4C  EF07  F000         	goto	start
   683  000A50                     __end_of_main:
   684                           	callstack 0
   685                           
   686 ;; *************** function _lcd_player *****************
   687 ;; Defined at:
   688 ;;		line 91 in file "lcd.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;		None
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, status,2, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   702 ;;      Params:         0       0       0       0       0       0       0       0       0
   703 ;;      Locals:         0       0       0       0       0       0       0       0       0
   704 ;;      Temps:          2       0       0       0       0       0       0       0       0
   705 ;;      Totals:         2       0       0       0       0       0       0       0       0
   706 ;;Total ram usage:        2 bytes
   707 ;; Hardware stack levels used: 1
   708 ;; Hardware stack levels required when called: 4
   709 ;; This function calls:
   710 ;;		_lcd_write
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text1
   717  000A50                     __ptext1:
   718                           	callstack 0
   719  000A50                     _lcd_player:
   720                           	callstack 26
   721  000A50                     
   722                           ;lcd.c: 93:     LE0 = 0;
   723  000A50  908D               	bcf	3981,0,c	;volatile
   724  000A52                     
   725                           ;lcd.c: 94:     lcd_write(0x40);
   726  000A52  0E40               	movlw	64
   727  000A54  EC2C  F006         	call	_lcd_write
   728  000A58                     
   729                           ;lcd.c: 96:     LE0 = 1;
   730  000A58  808D               	bsf	3981,0,c	;volatile
   731                           
   732                           ;lcd.c: 97:     lcd_write(0x0E);
   733  000A5A  0E0E               	movlw	14
   734  000A5C  EC2C  F006         	call	_lcd_write
   735                           
   736                           ;lcd.c: 98:     lcd_write(0x0A);
   737  000A60  0E0A               	movlw	10
   738  000A62  EC2C  F006         	call	_lcd_write
   739                           
   740                           ;lcd.c: 99:     lcd_write(0x1F);
   741  000A66  0E1F               	movlw	31
   742  000A68  EC2C  F006         	call	_lcd_write
   743                           
   744                           ;lcd.c: 100:     lcd_write(0x1F);
   745  000A6C  0E1F               	movlw	31
   746  000A6E  EC2C  F006         	call	_lcd_write
   747                           
   748                           ;lcd.c: 101:     lcd_write(0x1F);
   749  000A72  0E1F               	movlw	31
   750  000A74  EC2C  F006         	call	_lcd_write
   751                           
   752                           ;lcd.c: 102:     lcd_write(0x0A);
   753  000A78  0E0A               	movlw	10
   754  000A7A  EC2C  F006         	call	_lcd_write
   755                           
   756                           ;lcd.c: 103:     lcd_write(0x0A);
   757  000A7E  0E0A               	movlw	10
   758  000A80  EC2C  F006         	call	_lcd_write
   759                           
   760                           ;lcd.c: 104:     lcd_write(0x00);
   761  000A84  0E00               	movlw	0
   762  000A86  EC2C  F006         	call	_lcd_write
   763  000A8A                     
   764                           ;lcd.c: 106:     _delay((unsigned long)((50)*(20000000/4000.0)));
   765  000A8A  0E02               	movlw	2
   766  000A8C  6E08               	movwf	(??_lcd_player+1)^0,c
   767  000A8E  0E45               	movlw	69
   768  000A90  6E07               	movwf	??_lcd_player^0,c
   769  000A92  0EAA               	movlw	170
   770  000A94                     u107:
   771  000A94  2EE8               	decfsz	wreg,f,c
   772  000A96  D7FE               	bra	u107
   773  000A98  2E07               	decfsz	??_lcd_player^0,f,c
   774  000A9A  D7FC               	bra	u107
   775  000A9C  2E08               	decfsz	(??_lcd_player+1)^0,f,c
   776  000A9E  D7FA               	bra	u107
   777  000AA0                     
   778                           ;lcd.c: 108:     LE0 = 0;
   779  000AA0  908D               	bcf	3981,0,c	;volatile
   780  000AA2                     
   781                           ;lcd.c: 109:     lcd_write(0x48);
   782  000AA2  0E48               	movlw	72
   783  000AA4  EC2C  F006         	call	_lcd_write
   784  000AA8                     
   785                           ;lcd.c: 111:     LE0 = 1;
   786  000AA8  808D               	bsf	3981,0,c	;volatile
   787  000AAA                     
   788                           ;lcd.c: 112:     lcd_write(0x0A);
   789  000AAA  0E0A               	movlw	10
   790  000AAC  EC2C  F006         	call	_lcd_write
   791  000AB0                     
   792                           ;lcd.c: 113:     lcd_write(0x1F);
   793  000AB0  0E1F               	movlw	31
   794  000AB2  EC2C  F006         	call	_lcd_write
   795  000AB6                     
   796                           ;lcd.c: 114:     lcd_write(0x15);
   797  000AB6  0E15               	movlw	21
   798  000AB8  EC2C  F006         	call	_lcd_write
   799  000ABC                     
   800                           ;lcd.c: 115:     lcd_write(0x1F);
   801  000ABC  0E1F               	movlw	31
   802  000ABE  EC2C  F006         	call	_lcd_write
   803  000AC2                     
   804                           ;lcd.c: 116:     lcd_write(0x11);
   805  000AC2  0E11               	movlw	17
   806  000AC4  EC2C  F006         	call	_lcd_write
   807  000AC8                     
   808                           ;lcd.c: 117:     lcd_write(0x1F);
   809  000AC8  0E1F               	movlw	31
   810  000ACA  EC2C  F006         	call	_lcd_write
   811  000ACE                     
   812                           ;lcd.c: 118:     lcd_write(0x0A);
   813  000ACE  0E0A               	movlw	10
   814  000AD0  EC2C  F006         	call	_lcd_write
   815  000AD4                     
   816                           ;lcd.c: 119:     lcd_write(0x00);
   817  000AD4  0E00               	movlw	0
   818  000AD6  EC2C  F006         	call	_lcd_write
   819                           
   820                           ;lcd.c: 121:     _delay((unsigned long)((50)*(20000000/4000.0)));
   821  000ADA  0E02               	movlw	2
   822  000ADC  6E08               	movwf	(??_lcd_player+1)^0,c
   823  000ADE  0E45               	movlw	69
   824  000AE0  6E07               	movwf	??_lcd_player^0,c
   825  000AE2  0EAA               	movlw	170
   826  000AE4                     u117:
   827  000AE4  2EE8               	decfsz	wreg,f,c
   828  000AE6  D7FE               	bra	u117
   829  000AE8  2E07               	decfsz	??_lcd_player^0,f,c
   830  000AEA  D7FC               	bra	u117
   831  000AEC  2E08               	decfsz	(??_lcd_player+1)^0,f,c
   832  000AEE  D7FA               	bra	u117
   833  000AF0  0012               	return		;funcret
   834  000AF2                     __end_of_lcd_player:
   835                           	callstack 0
   836                           
   837 ;; *************** function _lcd_movimentoObstaculo *****************
   838 ;; Defined at:
   839 ;;		line 151 in file "lcd.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  pos             1    wreg     unsigned char 
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  pos             1    8[COMRAM] unsigned char 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      unsigned char 
   846 ;; Registers used:
   847 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   853 ;;      Params:         0       0       0       0       0       0       0       0       0
   854 ;;      Locals:         1       0       0       0       0       0       0       0       0
   855 ;;      Temps:          0       0       0       0       0       0       0       0       0
   856 ;;      Totals:         1       0       0       0       0       0       0       0       0
   857 ;;Total ram usage:        1 bytes
   858 ;; Hardware stack levels used: 1
   859 ;; Hardware stack levels required when called: 5
   860 ;; This function calls:
   861 ;;		_lcd_puts
   862 ;;		_lcd_write
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text2
   869  000B54                     __ptext2:
   870                           	callstack 0
   871  000B54                     _lcd_movimentoObstaculo:
   872                           	callstack 25
   873                           
   874                           ;incstack = 0
   875                           ;lcd_movimentoObstaculo@pos stored from wreg
   876  000B54  6E09               	movwf	lcd_movimentoObstaculo@pos^0,c
   877  000B56                     
   878                           ;lcd.c: 153:     LE0 = 0;
   879  000B56  908D               	bcf	3981,0,c	;volatile
   880  000B58                     
   881                           ;lcd.c: 154:     lcd_write(pos+1);
   882  000B58  2809               	incf	lcd_movimentoObstaculo@pos^0,w,c
   883  000B5A  EC2C  F006         	call	_lcd_write
   884  000B5E                     
   885                           ;lcd.c: 155:     lcd_puts(" ");
   886  000B5E  0E01               	movlw	low STR_1
   887  000B60  6E07               	movwf	lcd_puts@s^0,c
   888  000B62  0E08               	movlw	high STR_1
   889  000B64  6E08               	movwf	(lcd_puts@s+1)^0,c
   890  000B66  ECD5  F005         	call	_lcd_puts	;wreg free
   891  000B6A                     
   892                           ;lcd.c: 157:     if(pos < 0x80){
   893  000B6A  0E80               	movlw	128
   894  000B6C  6009               	cpfslt	lcd_movimentoObstaculo@pos^0,c
   895  000B6E  EFBB  F005         	goto	u61
   896  000B72  EFBD  F005         	goto	u60
   897  000B76                     u61:
   898  000B76  EFC0  F005         	goto	l130
   899  000B7A                     u60:
   900  000B7A                     
   901                           ;lcd.c: 158:         return 0x8F;
   902  000B7A  0E8F               	movlw	143
   903  000B7C  EFD4  F005         	goto	l131
   904  000B80                     l130:
   905                           
   906                           ;lcd.c: 161:         LE0 = 0;
   907  000B80  908D               	bcf	3981,0,c	;volatile
   908  000B82                     
   909                           ;lcd.c: 162:         lcd_write(pos+1);
   910  000B82  2809               	incf	lcd_movimentoObstaculo@pos^0,w,c
   911  000B84  EC2C  F006         	call	_lcd_write
   912  000B88                     
   913                           ;lcd.c: 163:         lcd_puts(" ");
   914  000B88  0E01               	movlw	low STR_1
   915  000B8A  6E07               	movwf	lcd_puts@s^0,c
   916  000B8C  0E08               	movlw	high STR_1
   917  000B8E  6E08               	movwf	(lcd_puts@s+1)^0,c
   918  000B90  ECD5  F005         	call	_lcd_puts	;wreg free
   919  000B94                     
   920                           ;lcd.c: 165:         LE0 = 0;
   921  000B94  908D               	bcf	3981,0,c	;volatile
   922  000B96                     
   923                           ;lcd.c: 166:         lcd_write(pos--);
   924  000B96  5009               	movf	lcd_movimentoObstaculo@pos^0,w,c
   925  000B98  EC2C  F006         	call	_lcd_write
   926  000B9C  0609               	decf	lcd_movimentoObstaculo@pos^0,f,c
   927  000B9E                     
   928                           ;lcd.c: 168:         LE0 = 1;
   929  000B9E  808D               	bsf	3981,0,c	;volatile
   930  000BA0                     
   931                           ;lcd.c: 169:         lcd_write(0x09);
   932  000BA0  0E09               	movlw	9
   933  000BA2  EC2C  F006         	call	_lcd_write
   934  000BA6                     
   935                           ;lcd.c: 171:         return pos;
   936  000BA6  5009               	movf	lcd_movimentoObstaculo@pos^0,w,c
   937  000BA8                     l131:
   938  000BA8  0012               	return		;funcret
   939  000BAA                     __end_of_lcd_movimentoObstaculo:
   940                           	callstack 0
   941                           
   942 ;; *************** function _lcd_puts *****************
   943 ;; Defined at:
   944 ;;		line 62 in file "lcd.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  s               2    6[COMRAM] PTR const unsigned char 
   947 ;;		 -> STR_2(2), STR_1(2), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   959 ;;      Params:         2       0       0       0       0       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0       0       0
   962 ;;      Totals:         2       0       0       0       0       0       0       0       0
   963 ;;Total ram usage:        2 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; Hardware stack levels required when called: 4
   966 ;; This function calls:
   967 ;;		_lcd_write
   968 ;; This function is called by:
   969 ;;		_lcd_movimentoObstaculo
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           	psect	text3
   974  000BAA                     __ptext3:
   975                           	callstack 0
   976  000BAA                     _lcd_puts:
   977                           	callstack 25
   978  000BAA                     
   979                           ;lcd.c: 62: lcd_puts(const char * s);lcd.c: 63: {;lcd.c: 64:  LE0 = 1;
   980  000BAA  808D               	bsf	3981,0,c	;volatile
   981                           
   982                           ;lcd.c: 65:  while(*s)
   983  000BAC  EFE2  F005         	goto	l1098
   984  000BB0                     l1094:
   985                           
   986                           ;lcd.c: 66:   lcd_write(*s++);
   987  000BB0  C007  FFF6         	movff	lcd_puts@s,tblptrl
   988  000BB4  C008  FFF7         	movff	lcd_puts@s+1,tblptrh
   989  000BB8                     	if	0	;tblptru may be non-zero
   990  000BB8                     	endif
   991  000BB8                     	if	0	;tblptru may be non-zero
   992  000BB8                     	endif
   993  000BB8  0008               	tblrd		*
   994  000BBA  50F5               	movf	tablat,w,c
   995  000BBC  EC2C  F006         	call	_lcd_write
   996  000BC0  4A07               	infsnz	lcd_puts@s^0,f,c
   997  000BC2  2A08               	incf	(lcd_puts@s+1)^0,f,c
   998  000BC4                     l1098:
   999                           
  1000                           ;lcd.c: 65:  while(*s)
  1001  000BC4  C007  FFF6         	movff	lcd_puts@s,tblptrl
  1002  000BC8  C008  FFF7         	movff	lcd_puts@s+1,tblptrh
  1003  000BCC                     	if	0	;tblptru may be non-zero
  1004  000BCC                     	endif
  1005  000BCC                     	if	0	;tblptru may be non-zero
  1006  000BCC                     	endif
  1007  000BCC  0008               	tblrd		*
  1008  000BCE  50F5               	movf	tablat,w,c
  1009  000BD0  0900               	iorlw	0
  1010  000BD2  A4D8               	btfss	status,2,c
  1011  000BD4  EFEE  F005         	goto	u51
  1012  000BD8  EFF0  F005         	goto	u50
  1013  000BDC                     u51:
  1014  000BDC  EFD8  F005         	goto	l1094
  1015  000BE0                     u50:
  1016  000BE0  0012               	return		;funcret
  1017  000BE2                     __end_of_lcd_puts:
  1018                           	callstack 0
  1019                           
  1020 ;; *************** function _lcd_init *****************
  1021 ;; Defined at:
  1022 ;;		line 208 in file "lcd.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  init_value      1    0        unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, status,2, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1036 ;;      Params:         0       0       0       0       0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1038 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1039 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1040 ;;Total ram usage:        1 bytes
  1041 ;; Hardware stack levels used: 1
  1042 ;; Hardware stack levels required when called: 5
  1043 ;; This function calls:
  1044 ;;		_lcd_clear
  1045 ;;		_lcd_write
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text4
  1052  000AF2                     __ptext4:
  1053                           	callstack 0
  1054  000AF2                     _lcd_init:
  1055                           	callstack 25
  1056  000AF2                     
  1057                           ;lcd.c: 214:  LE0 = 0;
  1058  000AF2  908D               	bcf	3981,0,c	;volatile
  1059  000AF4                     
  1060                           ;lcd.c: 215:  LE1 = 0;
  1061  000AF4  928D               	bcf	3981,1,c	;volatile
  1062  000AF6                     
  1063                           ;lcd.c: 218:  _delay((unsigned long)((15)*(20000000/4000.0)));
  1064  000AF6  0E62               	movlw	98
  1065  000AF8  6E08               	movwf	??_lcd_init^0,c
  1066  000AFA  0E66               	movlw	102
  1067  000AFC                     u127:
  1068  000AFC  2EE8               	decfsz	wreg,f,c
  1069  000AFE  D7FE               	bra	u127
  1070  000B00  2E08               	decfsz	??_lcd_init^0,f,c
  1071  000B02  D7FC               	bra	u127
  1072  000B04                     
  1073                           ;lcd.c: 219:  PORTD = init_value;
  1074  000B04  0E03               	movlw	3
  1075  000B06  6E83               	movwf	131,c	;volatile
  1076  000B08                     
  1077                           ;lcd.c: 220:  ((LE1 = 1),(LE1=0));
  1078  000B08  828D               	bsf	3981,1,c	;volatile
  1079  000B0A  928D               	bcf	3981,1,c	;volatile
  1080  000B0C                     
  1081                           ;lcd.c: 221:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1082  000B0C  0E21               	movlw	33
  1083  000B0E  6E08               	movwf	??_lcd_init^0,c
  1084  000B10  0E76               	movlw	118
  1085  000B12                     u137:
  1086  000B12  2EE8               	decfsz	wreg,f,c
  1087  000B14  D7FE               	bra	u137
  1088  000B16  2E08               	decfsz	??_lcd_init^0,f,c
  1089  000B18  D7FC               	bra	u137
  1090  000B1A  D000               	nop2	
  1091  000B1C                     
  1092                           ;lcd.c: 222:  ((LE1 = 1),(LE1=0));
  1093  000B1C  828D               	bsf	3981,1,c	;volatile
  1094  000B1E  928D               	bcf	3981,1,c	;volatile
  1095  000B20                     
  1096                           ;lcd.c: 223:  _delay((unsigned long)((200)*(20000000/4000000.0)));
  1097  000B20  0EC8               	movlw	200
  1098  000B22                     u147:
  1099  000B22  D000               	nop2	
  1100  000B24  2EE8               	decfsz	wreg,f,c
  1101  000B26  D7FD               	bra	u147
  1102  000B28                     
  1103                           ;lcd.c: 224:  ((LE1 = 1),(LE1=0));
  1104  000B28  828D               	bsf	3981,1,c	;volatile
  1105  000B2A  928D               	bcf	3981,1,c	;volatile
  1106  000B2C                     
  1107                           ;lcd.c: 225:  _delay((unsigned long)((200)*(20000000/4000000.0)));
  1108  000B2C  0EC8               	movlw	200
  1109  000B2E                     u157:
  1110  000B2E  D000               	nop2	
  1111  000B30  2EE8               	decfsz	wreg,f,c
  1112  000B32  D7FD               	bra	u157
  1113                           
  1114                           ;lcd.c: 226:  PORTD = 2;
  1115  000B34  0E02               	movlw	2
  1116  000B36  6E83               	movwf	131,c	;volatile
  1117  000B38                     
  1118                           ;lcd.c: 227:  ((LE1 = 1),(LE1=0));
  1119  000B38  828D               	bsf	3981,1,c	;volatile
  1120  000B3A  928D               	bcf	3981,1,c	;volatile
  1121  000B3C                     
  1122                           ;lcd.c: 229:  lcd_write(0x38);
  1123  000B3C  0E38               	movlw	56
  1124  000B3E  EC2C  F006         	call	_lcd_write
  1125  000B42                     
  1126                           ;lcd.c: 230:  lcd_write(0x06);
  1127  000B42  0E06               	movlw	6
  1128  000B44  EC2C  F006         	call	_lcd_write
  1129  000B48                     
  1130                           ;lcd.c: 231:  lcd_write(0x0C);
  1131  000B48  0E0C               	movlw	12
  1132  000B4A  EC2C  F006         	call	_lcd_write
  1133  000B4E                     
  1134                           ;lcd.c: 232:  lcd_clear();
  1135  000B4E  EC48  F006         	call	_lcd_clear	;wreg free
  1136  000B52  0012               	return		;funcret
  1137  000B54                     __end_of_lcd_init:
  1138                           	callstack 0
  1139                           
  1140 ;; *************** function _lcd_clear *****************
  1141 ;; Defined at:
  1142 ;;		line 52 in file "lcd.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;		None
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;		None
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1156 ;;      Params:         0       0       0       0       0       0       0       0       0
  1157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1158 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1159 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1160 ;;Total ram usage:        1 bytes
  1161 ;; Hardware stack levels used: 1
  1162 ;; Hardware stack levels required when called: 4
  1163 ;; This function calls:
  1164 ;;		_lcd_write
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;;		_lcd_init
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  000C90                     __ptext5:
  1173                           	callstack 0
  1174  000C90                     _lcd_clear:
  1175                           	callstack 25
  1176  000C90                     
  1177                           ;lcd.c: 54:  LE0 = 0;
  1178  000C90  908D               	bcf	3981,0,c	;volatile
  1179  000C92                     
  1180                           ;lcd.c: 55:  lcd_write(0x01);
  1181  000C92  0E01               	movlw	1
  1182  000C94  EC2C  F006         	call	_lcd_write
  1183  000C98                     
  1184                           ;lcd.c: 56:  _delay((unsigned long)((2)*(20000000/4000.0)));
  1185  000C98  0E0D               	movlw	13
  1186  000C9A  6E07               	movwf	??_lcd_clear^0,c
  1187  000C9C  0EFC               	movlw	252
  1188  000C9E                     u167:
  1189  000C9E  2EE8               	decfsz	wreg,f,c
  1190  000CA0  D7FE               	bra	u167
  1191  000CA2  2E07               	decfsz	??_lcd_clear^0,f,c
  1192  000CA4  D7FC               	bra	u167
  1193  000CA6  0012               	return		;funcret
  1194  000CA8                     __end_of_lcd_clear:
  1195                           	callstack 0
  1196                           
  1197 ;; *************** function _lcd_desenhaObstaculo *****************
  1198 ;; Defined at:
  1199 ;;		line 134 in file "lcd.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0
  1214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1216 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1217 ;;Total ram usage:        0 bytes
  1218 ;; Hardware stack levels used: 1
  1219 ;; Hardware stack levels required when called: 4
  1220 ;; This function calls:
  1221 ;;		_lcd_write
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text6
  1228  000CA8                     __ptext6:
  1229                           	callstack 0
  1230  000CA8                     _lcd_desenhaObstaculo:
  1231                           	callstack 26
  1232  000CA8                     
  1233                           ;lcd.c: 135:     LE0 = 0;
  1234  000CA8  908D               	bcf	3981,0,c	;volatile
  1235  000CAA                     
  1236                           ;lcd.c: 136:     lcd_write(0x8F);
  1237  000CAA  0E8F               	movlw	143
  1238  000CAC  EC2C  F006         	call	_lcd_write
  1239  000CB0                     
  1240                           ;lcd.c: 138:     LE0 = 1;
  1241  000CB0  808D               	bsf	3981,0,c	;volatile
  1242                           
  1243                           ;lcd.c: 139:     lcd_write(0x09);
  1244  000CB2  0E09               	movlw	9
  1245  000CB4  EC2C  F006         	call	_lcd_write
  1246  000CB8  0012               	return		;funcret
  1247  000CBA                     __end_of_lcd_desenhaObstaculo:
  1248                           	callstack 0
  1249                           
  1250 ;; *************** function _lcd_write *****************
  1251 ;; Defined at:
  1252 ;;		line 38 in file "lcd.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  c               1    wreg     unsigned char 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  c               1    5[COMRAM] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1266 ;;      Params:         0       0       0       0       0       0       0       0       0
  1267 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1268 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1269 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1270 ;;Total ram usage:        2 bytes
  1271 ;; Hardware stack levels used: 1
  1272 ;; Hardware stack levels required when called: 3
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_lcd_clear
  1277 ;;		_lcd_puts
  1278 ;;		_lcd_player
  1279 ;;		_lcd_desenhaObstaculo
  1280 ;;		_lcd_movimentoObstaculo
  1281 ;;		_lcd_init
  1282 ;;		_lcd_goto
  1283 ;;		_lcd_desenhaPlayer
  1284 ;;		_lcd_deslocaEsquerda
  1285 ;;		_lcd_movimentoPlayer
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text7
  1290  000C58                     __ptext7:
  1291                           	callstack 0
  1292  000C58                     _lcd_write:
  1293                           	callstack 26
  1294                           
  1295                           ;incstack = 0
  1296                           ;lcd_write@c stored from wreg
  1297  000C58  6E06               	movwf	lcd_write@c^0,c
  1298  000C5A                     
  1299                           ;lcd.c: 38: lcd_write(unsigned char c);lcd.c: 39: {;lcd.c: 40:  _delay((unsigned long)((
      +                          1)*(20000000/4000.0)));
  1300  000C5A  0E07               	movlw	7
  1301  000C5C  6E05               	movwf	??_lcd_write^0,c
  1302  000C5E  0E7D               	movlw	125
  1303  000C60                     u177:
  1304  000C60  2EE8               	decfsz	wreg,f,c
  1305  000C62  D7FE               	bra	u177
  1306  000C64  2E05               	decfsz	??_lcd_write^0,f,c
  1307  000C66  D7FC               	bra	u177
  1308  000C68  F000               	nop	
  1309  000C6A                     
  1310                           ;lcd.c: 41:     PORTD = ( c );
  1311  000C6A  C006  FF83         	movff	lcd_write@c,3971	;volatile
  1312  000C6E                     
  1313                           ;lcd.c: 42:  ((LE1 = 1),(LE1=0));
  1314  000C6E  828D               	bsf	3981,1,c	;volatile
  1315  000C70  928D               	bcf	3981,1,c	;volatile
  1316  000C72  0012               	return		;funcret
  1317  000C74                     __end_of_lcd_write:
  1318                           	callstack 0
  1319                           
  1320 ;; *************** function _configura *****************
  1321 ;; Defined at:
  1322 ;;		line 74 in file "./config.h"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1336 ;;      Params:         0       0       0       0       0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1339 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used: 1
  1342 ;; Hardware stack levels required when called: 3
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text8
  1351  000BE2                     __ptext8:
  1352                           	callstack 0
  1353  000BE2                     _configura:
  1354                           	callstack 27
  1355  000BE2  0EDF               	movlw	223
  1356  000BE4  6E92               	movwf	146,c	;volatile
  1357  000BE6  0EFA               	movlw	250
  1358  000BE8  6E93               	movwf	147,c	;volatile
  1359  000BEA  6894               	setf	148,c	;volatile
  1360  000BEC  0E00               	movlw	0
  1361  000BEE  6E95               	movwf	149,c	;volatile
  1362  000BF0  0E0C               	movlw	12
  1363  000BF2  6E96               	movwf	150,c	;volatile
  1364  000BF4  8ED0               	bsf	4048,7,c	;volatile
  1365  000BF6  0EC0               	movlw	192
  1366  000BF8  6EF2               	movwf	242,c	;volatile
  1367  000BFA  8A9D               	bsf	3997,5,c	;volatile
  1368  000BFC  8A9F               	bsf	3999,5,c	;volatile
  1369  000BFE  0E24               	movlw	36
  1370  000C00  6EAC               	movwf	172,c	;volatile
  1371  000C02  0E90               	movlw	144
  1372  000C04  6EAB               	movwf	171,c	;volatile
  1373  000C06  0E00               	movlw	0
  1374  000C08  6EB8               	movwf	184,c	;volatile
  1375  000C0A  0E81               	movlw	129
  1376  000C0C  6EAF               	movwf	175,c	;volatile
  1377  000C0E  0012               	return		;funcret
  1378  000C10                     __end_of_configura:
  1379                           	callstack 0
  1380                           
  1381 ;; *************** function _tmr *****************
  1382 ;; Defined at:
  1383 ;;		line 16 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  serial          1    3[COMRAM] unsigned char 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1397 ;;      Params:         0       0       0       0       0       0       0       0       0
  1398 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1400 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1401 ;;Total ram usage:        1 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; Hardware stack levels required when called: 2
  1404 ;; This function calls:
  1405 ;;		_lcd_putch
  1406 ;; This function is called by:
  1407 ;;		Interrupt level 2
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	intcode
  1412  000008                     __pintcode:
  1413                           	callstack 0
  1414  000008                     _tmr:
  1415                           	callstack 25
  1416                           
  1417                           ;incstack = 0
  1418  000008  8219               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1419  00000A  ED1A  F006         	call	int_func,f	;refresh shadow registers
  1420                           
  1421                           	psect	intcode_body
  1422  000C34                     __pintcode_body:
  1423                           	callstack 25
  1424  000C34                     int_func:
  1425                           	callstack 25
  1426  000C34  0006               	pop		; remove dummy address from shadow register refresh
  1427  000C36                     
  1428                           ;main.c: 17:     if(RCIF){
  1429  000C36  AA9E               	btfss	3998,5,c	;volatile
  1430  000C38  EF20  F006         	goto	i2u7_41
  1431  000C3C  EF22  F006         	goto	i2u7_40
  1432  000C40                     i2u7_41:
  1433  000C40  EF2A  F006         	goto	i2l65
  1434  000C44                     i2u7_40:
  1435  000C44                     
  1436                           ;main.c: 19:         char serial = RCREG;
  1437  000C44  CFAE F004          	movff	4014,tmr@serial	;volatile
  1438  000C48                     
  1439                           ;main.c: 20:         lcd_putch(serial);
  1440  000C48  5004               	movf	tmr@serial^0,w,c
  1441  000C4A  EC5D  F006         	call	_lcd_putch
  1442  000C4E                     
  1443                           ;main.c: 22:         RCIF =0;
  1444  000C4E  9A9E               	bcf	3998,5,c	;volatile
  1445  000C50                     
  1446                           ;main.c: 24:         TXREG = envia;
  1447  000C50  C018  FFAD         	movff	_envia,4013	;volatile
  1448  000C54                     i2l65:
  1449  000C54  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1450  000C56  0011               	retfie		f
  1451  000C58                     __end_of_tmr:
  1452                           	callstack 0
  1453                           
  1454 ;; *************** function _lcd_putch *****************
  1455 ;; Defined at:
  1456 ;;		line 72 in file "lcd.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  c               1    wreg     unsigned char 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  c               1    2[COMRAM] unsigned char 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1470 ;;      Params:         0       0       0       0       0       0       0       0       0
  1471 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1473 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1474 ;;Total ram usage:        1 bytes
  1475 ;; Hardware stack levels used: 1
  1476 ;; Hardware stack levels required when called: 1
  1477 ;; This function calls:
  1478 ;;		i2_lcd_write
  1479 ;; This function is called by:
  1480 ;;		_tmr
  1481 ;;		_lcd_movimentoPlayer
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text10
  1486  000CBA                     __ptext10:
  1487                           	callstack 0
  1488  000CBA                     _lcd_putch:
  1489                           	callstack 25
  1490                           
  1491                           ;incstack = 0
  1492                           ;lcd_putch@c stored from wreg
  1493  000CBA  6E03               	movwf	lcd_putch@c^0,c
  1494  000CBC                     
  1495                           ;lcd.c: 72: lcd_putch(char c);lcd.c: 73: {;lcd.c: 74:  LE0 = 1;
  1496  000CBC  808D               	bsf	3981,0,c	;volatile
  1497  000CBE                     
  1498                           ;lcd.c: 75:  lcd_write( c );
  1499  000CBE  5003               	movf	lcd_putch@c^0,w,c
  1500  000CC0  EC3A  F006         	call	i2_lcd_write
  1501  000CC4  0012               	return		;funcret
  1502  000CC6                     __end_of_lcd_putch:
  1503                           	callstack 0
  1504                           
  1505 ;; *************** function i2_lcd_write *****************
  1506 ;; Defined at:
  1507 ;;		line 38 in file "lcd.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  c               1    wreg     unsigned char 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  c               1    1[COMRAM] unsigned char 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0
  1522 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1523 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1524 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1525 ;;Total ram usage:        2 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_lcd_putch
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text11
  1535  000C74                     __ptext11:
  1536                           	callstack 0
  1537  000C74                     i2_lcd_write:
  1538                           	callstack 25
  1539                           
  1540                           ;incstack = 0
  1541                           ;i2lcd_write@c stored from wreg
  1542  000C74  6E02               	movwf	i2lcd_write@c^0,c
  1543  000C76                     
  1544                           ;lcd.c: 38: lcd_write(unsigned char c);lcd.c: 39: {;lcd.c: 40:  _delay((unsigned long)((
      +                          1)*(20000000/4000.0)));
  1545  000C76  0E07               	movlw	7
  1546  000C78  6E01               	movwf	??i2_lcd_write^0,c
  1547  000C7A  0E7D               	movlw	125
  1548  000C7C                     i2u18_47:
  1549  000C7C  2EE8               	decfsz	wreg,f,c
  1550  000C7E  D7FE               	bra	i2u18_47
  1551  000C80  2E01               	decfsz	??i2_lcd_write^0,f,c
  1552  000C82  D7FC               	bra	i2u18_47
  1553  000C84  F000               	nop	
  1554  000C86                     
  1555                           ;lcd.c: 41:     PORTD = ( c );
  1556  000C86  C002  FF83         	movff	i2lcd_write@c,3971	;volatile
  1557  000C8A                     
  1558                           ;lcd.c: 42:  ((LE1 = 1),(LE1=0));
  1559  000C8A  828D               	bsf	3981,1,c	;volatile
  1560  000C8C  928D               	bcf	3981,1,c	;volatile
  1561  000C8E  0012               	return		;funcret
  1562  000C90                     __end_ofi2_lcd_write:
  1563                           	callstack 0
  1564                           
  1565                           	psect	rparam
  1566  0000                     
  1567                           	psect	temp
  1568  000019                     btemp:
  1569                           	callstack 0
  1570  000019                     	ds	1
  1571  0000                     int$flags	set	btemp
  1572  0000                     wtemp8	set	btemp+1
  1573  0000                     ttemp5	set	btemp+1
  1574  0000                     ttemp6	set	btemp+4
  1575  0000                     ttemp7	set	btemp+8
  1576                           
  1577                           	psect	idloc
  1578                           
  1579                           ;Config register IDLOC0 @ 0x200000
  1580                           ;	unspecified, using default values
  1581  200000                     	org	2097152
  1582  200000  FF                 	db	255
  1583                           
  1584                           ;Config register IDLOC1 @ 0x200001
  1585                           ;	unspecified, using default values
  1586  200001                     	org	2097153
  1587  200001  FF                 	db	255
  1588                           
  1589                           ;Config register IDLOC2 @ 0x200002
  1590                           ;	unspecified, using default values
  1591  200002                     	org	2097154
  1592  200002  FF                 	db	255
  1593                           
  1594                           ;Config register IDLOC3 @ 0x200003
  1595                           ;	unspecified, using default values
  1596  200003                     	org	2097155
  1597  200003  FF                 	db	255
  1598                           
  1599                           ;Config register IDLOC4 @ 0x200004
  1600                           ;	unspecified, using default values
  1601  200004                     	org	2097156
  1602  200004  FF                 	db	255
  1603                           
  1604                           ;Config register IDLOC5 @ 0x200005
  1605                           ;	unspecified, using default values
  1606  200005                     	org	2097157
  1607  200005  FF                 	db	255
  1608                           
  1609                           ;Config register IDLOC6 @ 0x200006
  1610                           ;	unspecified, using default values
  1611  200006                     	org	2097158
  1612  200006  FF                 	db	255
  1613                           
  1614                           ;Config register IDLOC7 @ 0x200007
  1615                           ;	unspecified, using default values
  1616  200007                     	org	2097159
  1617  200007  FF                 	db	255
  1618                           
  1619                           	psect	config
  1620                           
  1621                           ;Config register CONFIG1L @ 0x300000
  1622                           ;	PLL Prescaler Selection bits
  1623                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
  1624                           ;	System Clock Postscaler Selection bits
  1625                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1626                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1627                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1628  300000                     	org	3145728
  1629  300000  04                 	db	4
  1630                           
  1631                           ;Config register CONFIG1H @ 0x300001
  1632                           ;	Oscillator Selection bits
  1633                           ;	FOSC = HS, HS oscillator (HS)
  1634                           ;	Fail-Safe Clock Monitor Enable bit
  1635                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1636                           ;	Internal/External Oscillator Switchover bit
  1637                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1638  300001                     	org	3145729
  1639  300001  0C                 	db	12
  1640                           
  1641                           ;Config register CONFIG2L @ 0x300002
  1642                           ;	Power-up Timer Enable bit
  1643                           ;	PWRT = ON, PWRT enabled
  1644                           ;	Brown-out Reset Enable bits
  1645                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1646                           ;	Brown-out Reset Voltage bits
  1647                           ;	BORV = 3, Minimum setting 2.05V
  1648                           ;	USB Voltage Regulator Enable bit
  1649                           ;	VREGEN = OFF, USB voltage regulator disabled
  1650  300002                     	org	3145730
  1651  300002  18                 	db	24
  1652                           
  1653                           ;Config register CONFIG2H @ 0x300003
  1654                           ;	Watchdog Timer Enable bit
  1655                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1656                           ;	Watchdog Timer Postscale Select bits
  1657                           ;	WDTPS = 32768, 1:32768
  1658  300003                     	org	3145731
  1659  300003  1E                 	db	30
  1660                           
  1661                           ; Padding undefined space
  1662  300004                     	org	3145732
  1663  300004  FF                 	db	255
  1664                           
  1665                           ;Config register CONFIG3H @ 0x300005
  1666                           ;	CCP2 MUX bit
  1667                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  1668                           ;	PORTB A/D Enable bit
  1669                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1670                           ;	Low-Power Timer 1 Oscillator Enable bit
  1671                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1672                           ;	MCLR Pin Enable bit
  1673                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1674  300005                     	org	3145733
  1675  300005  00                 	db	0
  1676                           
  1677                           ;Config register CONFIG4L @ 0x300006
  1678                           ;	Stack Full/Underflow Reset Enable bit
  1679                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1680                           ;	Single-Supply ICSP Enable bit
  1681                           ;	LVP = OFF, Single-Supply ICSP disabled
  1682                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1683                           ;	ICPRT = OFF, ICPORT disabled
  1684                           ;	Extended Instruction Set Enable bit
  1685                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1686                           ;	Background Debugger Enable bit
  1687                           ;	DEBUG = 0x1, unprogrammed default
  1688  300006                     	org	3145734
  1689  300006  81                 	db	129
  1690                           
  1691                           ; Padding undefined space
  1692  300007                     	org	3145735
  1693  300007  FF                 	db	255
  1694                           
  1695                           ;Config register CONFIG5L @ 0x300008
  1696                           ;	Code Protection bit
  1697                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1698                           ;	Code Protection bit
  1699                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1700                           ;	Code Protection bit
  1701                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1702                           ;	Code Protection bit
  1703                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1704  300008                     	org	3145736
  1705  300008  0F                 	db	15
  1706                           
  1707                           ;Config register CONFIG5H @ 0x300009
  1708                           ;	Boot Block Code Protection bit
  1709                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1710                           ;	Data EEPROM Code Protection bit
  1711                           ;	CPD = OFF, Data EEPROM is not code-protected
  1712  300009                     	org	3145737
  1713  300009  C0                 	db	192
  1714                           
  1715                           ;Config register CONFIG6L @ 0x30000A
  1716                           ;	Write Protection bit
  1717                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1718                           ;	Write Protection bit
  1719                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1720                           ;	Write Protection bit
  1721                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1722                           ;	Write Protection bit
  1723                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1724  30000A                     	org	3145738
  1725  30000A  0F                 	db	15
  1726                           
  1727                           ;Config register CONFIG6H @ 0x30000B
  1728                           ;	Configuration Register Write Protection bit
  1729                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1730                           ;	Boot Block Write Protection bit
  1731                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1732                           ;	Data EEPROM Write Protection bit
  1733                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1734  30000B                     	org	3145739
  1735  30000B  E0                 	db	224
  1736                           
  1737                           ;Config register CONFIG7L @ 0x30000C
  1738                           ;	Table Read Protection bit
  1739                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1740                           ;	Table Read Protection bit
  1741                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1742                           ;	Table Read Protection bit
  1743                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1744                           ;	Table Read Protection bit
  1745                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1746  30000C                     	org	3145740
  1747  30000C  0F                 	db	15
  1748                           
  1749                           ;Config register CONFIG7H @ 0x30000D
  1750                           ;	Boot Block Table Read Protection bit
  1751                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1752  30000D                     	org	3145741
  1753  30000D  40                 	db	64
  1754                           tosu	equ	0xFFF
  1755                           tosh	equ	0xFFE
  1756                           tosl	equ	0xFFD
  1757                           stkptr	equ	0xFFC
  1758                           pclatu	equ	0xFFB
  1759                           pclath	equ	0xFFA
  1760                           pcl	equ	0xFF9
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           indf0	equ	0xFEF
  1768                           postinc0	equ	0xFEE
  1769                           postdec0	equ	0xFED
  1770                           preinc0	equ	0xFEC
  1771                           plusw0	equ	0xFEB
  1772                           fsr0h	equ	0xFEA
  1773                           fsr0l	equ	0xFE9
  1774                           wreg	equ	0xFE8
  1775                           indf1	equ	0xFE7
  1776                           postinc1	equ	0xFE6
  1777                           postdec1	equ	0xFE5
  1778                           preinc1	equ	0xFE4
  1779                           plusw1	equ	0xFE3
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           bsr	equ	0xFE0
  1783                           indf2	equ	0xFDF
  1784                           postinc2	equ	0xFDE
  1785                           postdec2	equ	0xFDD
  1786                           preinc2	equ	0xFDC
  1787                           plusw2	equ	0xFDB
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8

Data Sizes:
    Strings     2
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_lcd_movimentoObstaculo
    _lcd_player->_lcd_write
    _lcd_movimentoObstaculo->_lcd_puts
    _lcd_puts->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _lcd_desenhaObstaculo->_lcd_write

Critical Paths under _tmr in COMRAM

    _tmr->_lcd_putch
    _lcd_putch->i2_lcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _tmr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tmr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tmr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tmr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tmr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tmr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tmr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tmr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    1112
                                              9 COMRAM    12    12      0
                          _configura
                          _lcd_clear
               _lcd_desenhaObstaculo
                           _lcd_init
             _lcd_movimentoObstaculo
                         _lcd_player
 ---------------------------------------------------------------------------------
 (1) _lcd_player                                           2     2      0      15
                                              6 COMRAM     2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_movimentoObstaculo                               1     1      0     338
                                              8 COMRAM     1     1      0
                           _lcd_puts
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2     212
                                              6 COMRAM     2     0      2
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      45
                                              7 COMRAM     1     1      0
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            1     1      0      15
                                              6 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_desenhaObstaculo                                 0     0      0      15
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_write                                            2     2      0      15
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _configura                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tmr                                                  1     1      0      67
                                              3 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (5) _lcd_putch                                            1     1      0      44
                                              2 COMRAM     1     1      0
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (6) i2_lcd_write                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configura
   _lcd_clear
     _lcd_write
   _lcd_desenhaObstaculo
     _lcd_write
   _lcd_init
     _lcd_clear
     _lcd_write
   _lcd_movimentoObstaculo
     _lcd_puts
       _lcd_write
     _lcd_write
   _lcd_player
     _lcd_write

 _tmr (ROOT)
   _lcd_putch
     i2_lcd_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     15      18       1       25.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Mar 18 02:35:52 2021

                              _x 0016                               l55 0C0E  
                             u50 0BE0                               u51 0BDC  
                             u60 0B7A                               u61 0B76  
                             u97 0856                              l100 0C72  
                            l103 0CA6                              l130 0B80  
                            l131 0BA8                              l124 0CB8  
                            l140 0B52                              l109 0BE0  
                            l118 0AF0                              l820 0C6E  
                            l900 0A50                              l822 0C70  
                            l910 0AA2                              l902 0A52  
                            l816 0C5A                              l824 0C90  
                            l920 0ABC                              l912 0AA8  
                            l904 0A58                              l850 0BF4  
                            l818 0C6A                              l930 0CA8  
                            l826 0C92                              l922 0AC2  
                            l914 0AAA                              l906 0A8A  
                            l852 0BFA                              l932 0CAA  
                            l828 0C98                              l860 0AF2  
                            l924 0AC8                              l916 0AB0  
                            l908 0AA0                              l854 0BFC  
                            l846 0BE2                              l934 0CB0  
                            l870 0B08                              l862 0AF2  
                            l926 0ACE                              l918 0AB6  
                            l848 0BEA                              l880 0B20  
                            l872 0B0A                              l864 0AF4  
                            l928 0AD4                              l890 0B3A  
                            l882 0B28                              l874 0B0C  
                            l866 0AF6                              _LE0 007C68  
                            _LE1 007C69                              l892 0B3C  
                            l884 0B2A                              l876 0B1C  
                            l868 0B04                              l894 0B42  
                            l886 0B2C                              l878 0B1E  
                            l896 0B48                              l888 0B38  
                            l898 0B4E                              u107 0A94  
                            u117 0AE4                              u127 0AFC  
                            u137 0B12                              u147 0B22  
                            u157 0B2E                              u167 0C9E  
                            u177 0C60                              _tmr 0008  
                            wreg 000FE8                             l1120 0B7A  
                           l1112 0B56                             l1200 08EC  
                           l1130 0B94                             l1114 0B58  
                           l1210 0998                             l1202 0938  
                           l1140 0BA6                             l1132 0B96  
                           l1116 0B5E                             l1212 09C4  
                           l1204 0944                             l1134 0B9C  
                           l1126 0B82                             l1118 0B6A  
                           l1206 0958                             l1136 0B9E  
                           l1128 0B88                             l1208 0974  
                           l1216 09F8                             l1160 0818  
                           l1138 0BA0                             l1218 0A44  
                           l1170 083C                             l1162 081A  
                           l1154 0804                             l1092 0BAA  
                           l1252 0902                             l1180 0884  
                           l1172 084C                             l1164 0824  
                           l1156 0808                             l1094 0BB0  
                           l1254 0A0E                             l1190 08B4  
                           l1182 088C                             l1174 0864  
                           l1166 083C                             l1158 080C  
                           l1096 0BC0                             l1192 08C0  
                           l1184 0898                             l1176 0870  
                           l1168 083C                             l1098 0BC4  
                           l1194 08C8                             l1186 08A0  
                           l1178 0878                             l1196 08D4  
                           l1188 08AC                             ?_tmr 0001  
                           STR_1 0801                             STR_2 0801  
                           _IPEN 007E87                             _RCIE 007CED  
                           _RCIF 007CF5                             _RCIP 007CFD  
                           i2l65 0C54                             _main 0804  
                           btemp 0019                             start 000E  
                   ___param_bank 000000                            ??_tmr 0004  
__size_of_lcd_movimentoObstaculo 0056                            ?_main 0001  
                    i2_lcd_write 0C74                            i2l100 0C8E  
                          i2l112 0CC4                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _PORTD 000F83                            _PORTE 000F84  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TXREG 000FAD  
                          _TXSTA 000FAC                            _envia 0018  
                          main@x 000C                            tablat 000FF5  
                          ttemp5 001A                            ttemp6 001D  
                          ttemp7 0021                            status 000FD8  
                          wtemp8 001A                  __initialization 0C10  
                   __end_of_main 0A50                           ??_main 000A  
                  __activetblptr 000002           _lcd_movimentoObstaculo 0B54  
                         i2l1100 0C76                           i2l1102 0C86  
                         i2l1110 0CBE                           i2l1104 0C8A  
                         i2l1106 0C8C                           i2l1108 0CBC  
                         i2l1150 0C4E                           i2l1152 0C50  
                         i2l1144 0C36                           i2l1146 0C44  
                         i2l1148 0C48                           _INTCON 000FF2  
                         i2u7_40 0C44                           i2u7_41 0C40  
   __end_of_lcd_desenhaObstaculo 0CBA                 __end_of_lcd_init 0B54  
               __end_of_lcd_puts 0BE2                           isa$std 000001  
                   __pdataCOMRAM 0018                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                       __accesstop 0060  
        __end_of__initialization 0C26                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001               __size_of_lcd_clear 0018  
             __size_of_configura 002E               __size_of_lcd_putch 000C  
             __size_of_lcd_write 001C                     i2lcd_write@c 0002  
                        _BAUDCON 000FB8                     ?i2_lcd_write 0001  
           _lcd_desenhaObstaculo 0CA8                          i2u18_47 0C7C  
                     _lcd_player 0A50                        ?_lcd_init 0001  
                      ?_lcd_puts 0007                          __Hparam 0000  
                        __Lparam 0000                __end_of_lcd_clear 0CA8  
              __end_of_configura 0C10                __end_of_lcd_putch 0CC6  
              __end_of_lcd_write 0C74                     __psmallconst 0800  
                        __pcinit 0C10                          __ramtop 0800  
                        __ptext0 0804                          __ptext1 0A50  
                        __ptext2 0B54                          __ptext3 0BAA  
                        __ptext4 0AF2                          __ptext5 0C90  
                        __ptext6 0CA8                          __ptext7 0C58  
                        __ptext8 0BE2                     __size_of_tmr 0C50  
          ?_lcd_desenhaObstaculo 0001          ?_lcd_movimentoObstaculo 0001  
                     ??_lcd_init 0008                   __pintcode_body 0C34  
                     ??_lcd_puts 0009             end_of_initialization 0C26  
                  __Lmediumconst 0000                          int_func 0C34  
                      _PORTBbits 000F81   __end_of_lcd_movimentoObstaculo 0BAA  
                    ?_lcd_player 0001                       lcd_putch@c 0003  
                     lcd_write@c 0006                    __pidataCOMRAM 0CC6  
         ??_lcd_desenhaObstaculo 0007              start_initialization 0C10  
           __size_ofi2_lcd_write 001C                      __end_of_tmr 0C58  
            __size_of_lcd_player 00A2                      __pbssCOMRAM 0016  
              __size_of_lcd_init 0062                __size_of_lcd_puts 0038  
                      __pintcode 0008                        _lcd_clear 0C90  
                      _configura 0BE2                        _lcd_putch 0CBA  
                      _lcd_write 0C58                      __smallconst 0800  
      lcd_movimentoObstaculo@pos 0009                       ?_lcd_clear 0001  
                     ?_configura 0001                       ?_lcd_putch 0001  
                     ?_lcd_write 0001                        main@flagA 000E  
                      main@posA1 0014                        main@posA2 0015  
                      main@posA3 0013                        main@posA4 0012  
                      main@posA5 0011                        main@posA6 0010  
                      lcd_puts@s 0007                     ??_lcd_player 0007  
                       __Hrparam 0000                         __Lrparam 0000  
             __end_of_lcd_player 0AF2                         __ptext10 0CBA  
                       __ptext11 0C74                         _lcd_init 0AF2  
                       _lcd_puts 0BAA                    __size_of_main 024C  
                      tmr@serial 0004                         isa$xinst 000000  
                       int$flags 0019                      ??_lcd_clear 0007  
                    ??_configura 0005                      ??_lcd_putch 0003  
                  ??i2_lcd_write 0001                      ??_lcd_write 0005  
  __size_of_lcd_desenhaObstaculo 0012                         intlevel2 0000  
       ??_lcd_movimentoObstaculo 0009              __end_ofi2_lcd_write 0C90  
